// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package computing

import (
	"context"

	"github.com/aokumasan/nifcloud-sdk-go-v2/internal/nifcloudutil"
	"github.com/aws/aws-sdk-go-v2/aws"
)

type DescribeUsageInput struct {
	_ struct{} `type:"structure"`

	IsCharge *bool `locationName:"IsCharge" type:"boolean"`

	Region *string `locationName:"Region" type:"string"`

	YearMonth *string `locationName:"YearMonth" type:"string"`
}

// String returns the string representation
func (s DescribeUsageInput) String() string {
	return nifcloudutil.Prettify(s)
}

type DescribeUsageOutput struct {
	_ struct{} `type:"structure"`

	AutoScaleInfo *AutoScaleInfo `locationName:"autoScaleInfo" type:"structure"`

	ChargeDetailInfo *ChargeDetailInfo `locationName:"chargeDetailInfo" type:"structure"`

	CopyInfo *CopyInfo `locationName:"copyInfo" type:"structure"`

	ElasticIpInfo *ElasticIpInfo `locationName:"elasticIpInfo" type:"structure"`

	ElasticLoadBalancerInfo *ElasticLoadBalancerInfo `locationName:"elasticLoadBalancerInfo" type:"structure"`

	ExtraChargeInfo *ExtraChargeInfo `locationName:"extraChargeInfo" type:"structure"`

	ImageInfo *ImageInfo `locationName:"imageInfo" type:"structure"`

	InstanceBackupInfo *InstanceBackupInfo `locationName:"instanceBackupInfo" type:"structure"`

	InstanceInfo *InstanceInfo `locationName:"instanceInfo" type:"structure"`

	InternetVpnInfo *InternetVpnInfo `locationName:"internetVpnInfo" type:"structure"`

	LicenseInfo *LicenseInfo `locationName:"licenseInfo" type:"structure"`

	LoadBalancerInfo *LoadBalancerInfo `locationName:"loadBalancerInfo" type:"structure"`

	MailSendInfo *MailSendInfo `locationName:"mailSendInfo" type:"structure"`

	MultiAccountInfo *MultiAccountInfo `locationName:"multiAccountInfo" type:"structure"`

	NetworkInfo *NetworkInfo `locationName:"networkInfo" type:"structure"`

	NetworkInterfaceInfo *NetworkInterfaceInfo `locationName:"networkInterfaceInfo" type:"structure"`

	OptionCommonInfo []OptionCommonInfoSetItem `locationName:"optionCommonInfo" locationNameList:"item" type:"list"`

	OptionInfo []OptionInfoSetItem `locationName:"optionInfo" locationNameList:"item" type:"list"`

	OsOptionChargeInfo *OsOptionChargeInfo `locationName:"osOptionChargeInfo" type:"structure"`

	PatternAuthInfo *PatternAuthInfo `locationName:"patternAuthInfo" type:"structure"`

	PremiumSupportInfo *PremiumSupportInfo `locationName:"premiumSupportInfo" type:"structure"`

	PrivateLanInfo *PrivateLanInfo `locationName:"privateLanInfo" type:"structure"`

	PrivateNetworkInfo *PrivateNetworkInfo `locationName:"privateNetworkInfo" type:"structure"`

	RemoteAccessVpnGatewayInfo *RemoteAccessVpnGatewayInfo `locationName:"remoteAccessVpnGatewayInfo" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`

	RouterInfo *RouterInfo `locationName:"routerInfo" type:"structure"`

	SecureNetInfo *SecureNetInfo `locationName:"secureNetInfo" type:"structure"`

	SecurityGroupInfo *SecurityGroupInfo `locationName:"securityGroupInfo" type:"structure"`

	SnapshotInfo *SnapshotInfo `locationName:"snapshotInfo" type:"structure"`

	SslCertInfo *SslCertInfo `locationName:"sslCertInfo" type:"structure"`

	StorageInfo *StorageInfo `locationName:"storageInfo" type:"structure"`

	VolumeInfo *VolumeInfo `locationName:"volumeInfo" type:"structure"`

	VpnGatewayInfo *VpnGatewayInfo `locationName:"vpnGatewayInfo" type:"structure"`

	YearMonth *string `locationName:"yearMonth" type:"string"`
}

// String returns the string representation
func (s DescribeUsageOutput) String() string {
	return nifcloudutil.Prettify(s)
}

const opDescribeUsage = "DescribeUsage"

// DescribeUsageRequest returns a request value for making API operation for
// NIFCLOUD Computing.
//
//    // Example sending a request using DescribeUsageRequest.
//    req := client.DescribeUsageRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/computing-2016-11-15/DescribeUsage
func (c *Client) DescribeUsageRequest(input *DescribeUsageInput) DescribeUsageRequest {
	op := &aws.Operation{
		Name:       opDescribeUsage,
		HTTPMethod: "POST",
		HTTPPath:   "/api/",
	}

	if input == nil {
		input = &DescribeUsageInput{}
	}

	req := c.newRequest(op, input, &DescribeUsageOutput{})
	return DescribeUsageRequest{Request: req, Input: input, Copy: c.DescribeUsageRequest}
}

// DescribeUsageRequest is the request type for the
// DescribeUsage API operation.
type DescribeUsageRequest struct {
	*aws.Request
	Input *DescribeUsageInput
	Copy  func(*DescribeUsageInput) DescribeUsageRequest
}

// Send marshals and sends the DescribeUsage API request.
func (r DescribeUsageRequest) Send(ctx context.Context) (*DescribeUsageResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &DescribeUsageResponse{
		DescribeUsageOutput: r.Request.Data.(*DescribeUsageOutput),
		response:            &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// DescribeUsageResponse is the response type for the
// DescribeUsage API operation.
type DescribeUsageResponse struct {
	*DescribeUsageOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// DescribeUsage request.
func (r *DescribeUsageResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
