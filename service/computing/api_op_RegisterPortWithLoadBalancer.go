// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package computing

import (
	"context"

	"github.com/alice02/nifcloud-sdk-go-v2/internal/nifcloudutil"
	"github.com/aws/aws-sdk-go-v2/aws"
)

type RegisterPortWithLoadBalancerInput struct {
	_ struct{} `type:"structure"`

	Listeners []RequestListenersStruct `locationName:"Listeners" locationNameList:"member" type:"list"`

	LoadBalancerName *string `locationName:"LoadBalancerName" type:"string"`
}

// String returns the string representation
func (s RegisterPortWithLoadBalancerInput) String() string {
	return nifcloudutil.Prettify(s)
}

type RegisterPortWithLoadBalancerOutput struct {
	_ struct{} `type:"structure"`

	Listeners []ListenersMemberItem `locationName:"Listeners" locationNameList:"member" type:"list"`

	RegisterPortWithLoadBalancerResult *RegisterPortWithLoadBalancerResult `locationName:"RegisterPortWithLoadBalancerResult" type:"structure"`

	ResponseMetadata *ResponseMetadata `locationName:"ResponseMetadata" type:"structure"`
}

// String returns the string representation
func (s RegisterPortWithLoadBalancerOutput) String() string {
	return nifcloudutil.Prettify(s)
}

const opRegisterPortWithLoadBalancer = "RegisterPortWithLoadBalancer"

// RegisterPortWithLoadBalancerRequest returns a request value for making API operation for
// NIFCLOUD Computing.
//
//    // Example sending a request using RegisterPortWithLoadBalancerRequest.
//    req := client.RegisterPortWithLoadBalancerRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/computing-2016-11-15/RegisterPortWithLoadBalancer
func (c *Client) RegisterPortWithLoadBalancerRequest(input *RegisterPortWithLoadBalancerInput) RegisterPortWithLoadBalancerRequest {
	op := &aws.Operation{
		Name:       opRegisterPortWithLoadBalancer,
		HTTPMethod: "POST",
		HTTPPath:   "/api/",
	}

	if input == nil {
		input = &RegisterPortWithLoadBalancerInput{}
	}

	req := c.newRequest(op, input, &RegisterPortWithLoadBalancerOutput{})
	return RegisterPortWithLoadBalancerRequest{Request: req, Input: input, Copy: c.RegisterPortWithLoadBalancerRequest}
}

// RegisterPortWithLoadBalancerRequest is the request type for the
// RegisterPortWithLoadBalancer API operation.
type RegisterPortWithLoadBalancerRequest struct {
	*aws.Request
	Input *RegisterPortWithLoadBalancerInput
	Copy  func(*RegisterPortWithLoadBalancerInput) RegisterPortWithLoadBalancerRequest
}

// Send marshals and sends the RegisterPortWithLoadBalancer API request.
func (r RegisterPortWithLoadBalancerRequest) Send(ctx context.Context) (*RegisterPortWithLoadBalancerResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &RegisterPortWithLoadBalancerResponse{
		RegisterPortWithLoadBalancerOutput: r.Request.Data.(*RegisterPortWithLoadBalancerOutput),
		response:                           &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// RegisterPortWithLoadBalancerResponse is the response type for the
// RegisterPortWithLoadBalancer API operation.
type RegisterPortWithLoadBalancerResponse struct {
	*RegisterPortWithLoadBalancerOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// RegisterPortWithLoadBalancer request.
func (r *RegisterPortWithLoadBalancerResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
