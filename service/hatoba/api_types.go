// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package hatoba

import (
	"fmt"

	"github.com/alice02/nifcloud-sdk-go-v2/internal/nifcloudutil"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
)

var _ aws.Config
var _ = nifcloudutil.Prettify

type AddonsConfig struct {
	_ struct{} `type:"structure"`

	HttpLoadBalancing *HttpLoadBalancing `locationName:"httpLoadBalancing" type:"structure"`
}

// String returns the string representation
func (s AddonsConfig) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddonsConfig) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "AddonsConfig"}
	if s.HttpLoadBalancing != nil {
		if err := s.HttpLoadBalancing.Validate(); err != nil {
			invalidParams.AddNested("HttpLoadBalancing", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s AddonsConfig) MarshalFields(e protocol.FieldEncoder) error {
	if s.HttpLoadBalancing != nil {
		v := s.HttpLoadBalancing

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "httpLoadBalancing", v, metadata)
	}
	return nil
}

type AuthorizeFirewallGroupRequestFirewallRule struct {
	_ struct{} `type:"structure"`

	CidrIp *string `locationName:"cidrIp" type:"string"`

	Description *string `locationName:"description" type:"string"`

	Direction *string `locationName:"direction" type:"string"`

	FromPort *int64 `locationName:"fromPort" type:"integer"`

	Protocol *string `locationName:"protocol" type:"string"`

	ToPort *int64 `locationName:"toPort" type:"integer"`
}

// String returns the string representation
func (s AuthorizeFirewallGroupRequestFirewallRule) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s AuthorizeFirewallGroupRequestFirewallRule) MarshalFields(e protocol.FieldEncoder) error {
	if s.CidrIp != nil {
		v := *s.CidrIp

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "cidrIp", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Direction != nil {
		v := *s.Direction

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "direction", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.FromPort != nil {
		v := *s.FromPort

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "fromPort", protocol.Int64Value(v), metadata)
	}
	if s.Protocol != nil {
		v := *s.Protocol

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "protocol", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ToPort != nil {
		v := *s.ToPort

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "toPort", protocol.Int64Value(v), metadata)
	}
	return nil
}

type Cluster struct {
	_ struct{} `type:"structure"`

	AddonsConfig *AddonsConfig `locationName:"addonsConfig" type:"structure"`

	CreateTime *string `locationName:"createTime" type:"string"`

	Description *string `locationName:"description" type:"string"`

	FirewallGroup *string `locationName:"firewallGroup" type:"string"`

	InitialKubernetesVersion *string `locationName:"initialKubernetesVersion" type:"string"`

	InitialNodeCount *int64 `locationName:"initialNodeCount" type:"integer"`

	KubernetesVersion *string `locationName:"kubernetesVersion" type:"string"`

	Locations []string `locationName:"locations" type:"list"`

	MasterNodeCount *int64 `locationName:"masterNodeCount" type:"integer"`

	Name *string `locationName:"name" type:"string"`

	NetworkConfig *NetworkConfig `locationName:"networkConfig" type:"structure"`

	NodeCount *int64 `locationName:"nodeCount" type:"integer"`

	NodePools []NodePool `locationName:"nodePools" type:"list"`

	Status *string `locationName:"status" type:"string"`
}

// String returns the string representation
func (s Cluster) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s Cluster) MarshalFields(e protocol.FieldEncoder) error {
	if s.AddonsConfig != nil {
		v := s.AddonsConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "addonsConfig", v, metadata)
	}
	if s.CreateTime != nil {
		v := *s.CreateTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "createTime", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.FirewallGroup != nil {
		v := *s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "firewallGroup", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.InitialKubernetesVersion != nil {
		v := *s.InitialKubernetesVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "initialKubernetesVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.InitialNodeCount != nil {
		v := *s.InitialNodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "initialNodeCount", protocol.Int64Value(v), metadata)
	}
	if s.KubernetesVersion != nil {
		v := *s.KubernetesVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "kubernetesVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Locations != nil {
		v := s.Locations

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "locations", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddValue(protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v1)})
		}
		ls0.End()

	}
	if s.MasterNodeCount != nil {
		v := *s.MasterNodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "masterNodeCount", protocol.Int64Value(v), metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NetworkConfig != nil {
		v := s.NetworkConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "networkConfig", v, metadata)
	}
	if s.NodeCount != nil {
		v := *s.NodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "nodeCount", protocol.Int64Value(v), metadata)
	}
	if s.NodePools != nil {
		v := s.NodePools

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "nodePools", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.Status != nil {
		v := *s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

type CreateClusterRequestCluster struct {
	_ struct{} `type:"structure"`

	AddonsConfig *AddonsConfig `locationName:"addonsConfig" type:"structure"`

	Description *string `locationName:"description" type:"string"`

	// FirewallGroup is a required field
	FirewallGroup *string `locationName:"firewallGroup" type:"string" required:"true"`

	KubernetesVersion *string `locationName:"kubernetesVersion" type:"string"`

	// Locations is a required field
	Locations []string `locationName:"locations" type:"list" required:"true"`

	MasterNodeCount *int64 `locationName:"masterNodeCount" type:"integer"`

	// Name is a required field
	Name *string `locationName:"name" type:"string" required:"true"`

	NetworkConfig *NetworkConfig `locationName:"networkConfig" type:"structure"`

	// NodePools is a required field
	NodePools []CreateClusterRequestNodePool `locationName:"nodePools" type:"list" required:"true"`
}

// String returns the string representation
func (s CreateClusterRequestCluster) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateClusterRequestCluster) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateClusterRequestCluster"}

	if s.FirewallGroup == nil {
		invalidParams.Add(aws.NewErrParamRequired("FirewallGroup"))
	}

	if s.Locations == nil {
		invalidParams.Add(aws.NewErrParamRequired("Locations"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if s.NodePools == nil {
		invalidParams.Add(aws.NewErrParamRequired("NodePools"))
	}
	if s.AddonsConfig != nil {
		if err := s.AddonsConfig.Validate(); err != nil {
			invalidParams.AddNested("AddonsConfig", err.(aws.ErrInvalidParams))
		}
	}
	if s.NetworkConfig != nil {
		if err := s.NetworkConfig.Validate(); err != nil {
			invalidParams.AddNested("NetworkConfig", err.(aws.ErrInvalidParams))
		}
	}
	if s.NodePools != nil {
		for i, v := range s.NodePools {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "NodePools", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateClusterRequestCluster) MarshalFields(e protocol.FieldEncoder) error {
	if s.AddonsConfig != nil {
		v := s.AddonsConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "addonsConfig", v, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.FirewallGroup != nil {
		v := *s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "firewallGroup", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.KubernetesVersion != nil {
		v := *s.KubernetesVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "kubernetesVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Locations != nil {
		v := s.Locations

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "locations", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddValue(protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v1)})
		}
		ls0.End()

	}
	if s.MasterNodeCount != nil {
		v := *s.MasterNodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "masterNodeCount", protocol.Int64Value(v), metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NetworkConfig != nil {
		v := s.NetworkConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "networkConfig", v, metadata)
	}
	if s.NodePools != nil {
		v := s.NodePools

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "nodePools", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

type CreateClusterRequestNodePool struct {
	_ struct{} `type:"structure"`

	// InstanceType is a required field
	InstanceType *string `locationName:"instanceType" type:"string" required:"true"`

	// Name is a required field
	Name *string `locationName:"name" type:"string" required:"true"`

	NodeCount *int64 `locationName:"nodeCount" type:"integer"`
}

// String returns the string representation
func (s CreateClusterRequestNodePool) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateClusterRequestNodePool) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateClusterRequestNodePool"}

	if s.InstanceType == nil {
		invalidParams.Add(aws.NewErrParamRequired("InstanceType"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateClusterRequestNodePool) MarshalFields(e protocol.FieldEncoder) error {
	if s.InstanceType != nil {
		v := *s.InstanceType

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "instanceType", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NodeCount != nil {
		v := *s.NodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "nodeCount", protocol.Int64Value(v), metadata)
	}
	return nil
}

type CreateFirewallGroupRequestFirewallGroup struct {
	_ struct{} `type:"structure"`

	Description *string `locationName:"description" type:"string"`

	// Name is a required field
	Name *string `locationName:"name" type:"string" required:"true"`
}

// String returns the string representation
func (s CreateFirewallGroupRequestFirewallGroup) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateFirewallGroupRequestFirewallGroup) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateFirewallGroupRequestFirewallGroup"}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateFirewallGroupRequestFirewallGroup) MarshalFields(e protocol.FieldEncoder) error {
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

type CreateSnapshotRequestSnapshot struct {
	_ struct{} `type:"structure"`

	// Cluster is a required field
	Cluster *CreateSnapshotRequestSnapshotCluster `locationName:"cluster" type:"structure" required:"true"`

	Description *string `locationName:"description" type:"string"`

	ExpirationTime *string `locationName:"expirationTime" type:"string"`

	// Name is a required field
	Name *string `locationName:"name" type:"string" required:"true"`
}

// String returns the string representation
func (s CreateSnapshotRequestSnapshot) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSnapshotRequestSnapshot) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateSnapshotRequestSnapshot"}

	if s.Cluster == nil {
		invalidParams.Add(aws.NewErrParamRequired("Cluster"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateSnapshotRequestSnapshot) MarshalFields(e protocol.FieldEncoder) error {
	if s.Cluster != nil {
		v := s.Cluster

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "cluster", v, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ExpirationTime != nil {
		v := *s.ExpirationTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "expirationTime", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

type CreateSnapshotRequestSnapshotCluster struct {
	_ struct{} `type:"structure"`

	Name *string `locationName:"name" type:"string"`
}

// String returns the string representation
func (s CreateSnapshotRequestSnapshotCluster) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateSnapshotRequestSnapshotCluster) MarshalFields(e protocol.FieldEncoder) error {
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

type FirewallGroupResponse struct {
	_ struct{} `type:"structure"`

	Description *string `locationName:"description" type:"string"`

	Name *string `locationName:"name" type:"string"`

	Rules []FirewallRule `locationName:"rules" type:"list"`
}

// String returns the string representation
func (s FirewallGroupResponse) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s FirewallGroupResponse) MarshalFields(e protocol.FieldEncoder) error {
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Rules != nil {
		v := s.Rules

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "rules", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

type FirewallRule struct {
	_ struct{} `type:"structure"`

	CidrIp *string `locationName:"cidrIp" type:"string"`

	Description *string `locationName:"description" type:"string"`

	Direction *string `locationName:"direction" type:"string"`

	FromPort *int64 `locationName:"fromPort" type:"integer"`

	Id *string `locationName:"id" type:"string"`

	Protocol *string `locationName:"protocol" type:"string"`

	Status *string `locationName:"status" type:"string"`

	ToPort *int64 `locationName:"toPort" type:"integer"`
}

// String returns the string representation
func (s FirewallRule) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s FirewallRule) MarshalFields(e protocol.FieldEncoder) error {
	if s.CidrIp != nil {
		v := *s.CidrIp

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "cidrIp", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Direction != nil {
		v := *s.Direction

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "direction", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.FromPort != nil {
		v := *s.FromPort

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "fromPort", protocol.Int64Value(v), metadata)
	}
	if s.Id != nil {
		v := *s.Id

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "id", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Protocol != nil {
		v := *s.Protocol

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "protocol", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Status != nil {
		v := *s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ToPort != nil {
		v := *s.ToPort

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "toPort", protocol.Int64Value(v), metadata)
	}
	return nil
}

type HttpLoadBalancing struct {
	_ struct{} `type:"structure"`

	// Disabled is a required field
	Disabled *bool `locationName:"disabled" type:"boolean" required:"true"`
}

// String returns the string representation
func (s HttpLoadBalancing) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *HttpLoadBalancing) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "HttpLoadBalancing"}

	if s.Disabled == nil {
		invalidParams.Add(aws.NewErrParamRequired("Disabled"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s HttpLoadBalancing) MarshalFields(e protocol.FieldEncoder) error {
	if s.Disabled != nil {
		v := *s.Disabled

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "disabled", protocol.BoolValue(v), metadata)
	}
	return nil
}

type NetworkConfig struct {
	_ struct{} `type:"structure"`

	// NetworkId is a required field
	NetworkId *string `locationName:"networkId" type:"string" required:"true"`
}

// String returns the string representation
func (s NetworkConfig) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *NetworkConfig) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "NetworkConfig"}

	if s.NetworkId == nil {
		invalidParams.Add(aws.NewErrParamRequired("NetworkId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s NetworkConfig) MarshalFields(e protocol.FieldEncoder) error {
	if s.NetworkId != nil {
		v := *s.NetworkId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "networkId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

type Node struct {
	_ struct{} `type:"structure"`

	AvailabilityZone *string `locationName:"availabilityZone" type:"string"`

	Name *string `locationName:"name" type:"string"`

	PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`

	PublicIpAddress *string `locationName:"publicIpAddress" type:"string"`

	Status *string `locationName:"status" type:"string"`
}

// String returns the string representation
func (s Node) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s Node) MarshalFields(e protocol.FieldEncoder) error {
	if s.AvailabilityZone != nil {
		v := *s.AvailabilityZone

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "availabilityZone", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.PrivateIpAddress != nil {
		v := *s.PrivateIpAddress

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "privateIpAddress", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.PublicIpAddress != nil {
		v := *s.PublicIpAddress

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "publicIpAddress", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Status != nil {
		v := *s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

type NodePool struct {
	_ struct{} `type:"structure"`

	InitialNodeCount *int64 `locationName:"initialNodeCount" type:"integer"`

	InstanceType *string `locationName:"instanceType" type:"string"`

	Name *string `locationName:"name" type:"string"`

	NodeCount *int64 `locationName:"nodeCount" type:"integer"`

	Nodes []Node `locationName:"nodes" type:"list"`

	Status *string `locationName:"status" type:"string"`
}

// String returns the string representation
func (s NodePool) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s NodePool) MarshalFields(e protocol.FieldEncoder) error {
	if s.InitialNodeCount != nil {
		v := *s.InitialNodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "initialNodeCount", protocol.Int64Value(v), metadata)
	}
	if s.InstanceType != nil {
		v := *s.InstanceType

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "instanceType", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NodeCount != nil {
		v := *s.NodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "nodeCount", protocol.Int64Value(v), metadata)
	}
	if s.Nodes != nil {
		v := s.Nodes

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "nodes", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.Status != nil {
		v := *s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

type RestoreClusterFromSnapshotRequestCluster struct {
	_ struct{} `type:"structure"`

	AddonsConfig *AddonsConfig `locationName:"addonsConfig" type:"structure"`

	Description *string `locationName:"description" type:"string"`

	// FirewallGroup is a required field
	FirewallGroup *string `locationName:"firewallGroup" type:"string" required:"true"`

	// Locations is a required field
	Locations []string `locationName:"locations" type:"list" required:"true"`

	MasterNodeCount *int64 `locationName:"masterNodeCount" type:"integer"`

	// Name is a required field
	Name *string `locationName:"name" type:"string" required:"true"`

	NetworkConfig *NetworkConfig `locationName:"networkConfig" type:"structure"`
}

// String returns the string representation
func (s RestoreClusterFromSnapshotRequestCluster) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RestoreClusterFromSnapshotRequestCluster) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "RestoreClusterFromSnapshotRequestCluster"}

	if s.FirewallGroup == nil {
		invalidParams.Add(aws.NewErrParamRequired("FirewallGroup"))
	}

	if s.Locations == nil {
		invalidParams.Add(aws.NewErrParamRequired("Locations"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}
	if s.AddonsConfig != nil {
		if err := s.AddonsConfig.Validate(); err != nil {
			invalidParams.AddNested("AddonsConfig", err.(aws.ErrInvalidParams))
		}
	}
	if s.NetworkConfig != nil {
		if err := s.NetworkConfig.Validate(); err != nil {
			invalidParams.AddNested("NetworkConfig", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s RestoreClusterFromSnapshotRequestCluster) MarshalFields(e protocol.FieldEncoder) error {
	if s.AddonsConfig != nil {
		v := s.AddonsConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "addonsConfig", v, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.FirewallGroup != nil {
		v := *s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "firewallGroup", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Locations != nil {
		v := s.Locations

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "locations", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddValue(protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v1)})
		}
		ls0.End()

	}
	if s.MasterNodeCount != nil {
		v := *s.MasterNodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "masterNodeCount", protocol.Int64Value(v), metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NetworkConfig != nil {
		v := s.NetworkConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "networkConfig", v, metadata)
	}
	return nil
}

type ServerConfig struct {
	_ struct{} `type:"structure"`

	DefaultKubernetesVersion *string `locationName:"defaultKubernetesVersion" type:"string"`

	ValidKubernetesVersions []string `locationName:"validKubernetesVersions" type:"list"`
}

// String returns the string representation
func (s ServerConfig) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ServerConfig) MarshalFields(e protocol.FieldEncoder) error {
	if s.DefaultKubernetesVersion != nil {
		v := *s.DefaultKubernetesVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "defaultKubernetesVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ValidKubernetesVersions != nil {
		v := s.ValidKubernetesVersions

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "validKubernetesVersions", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddValue(protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v1)})
		}
		ls0.End()

	}
	return nil
}

type Snapshot struct {
	_ struct{} `type:"structure"`

	Cluster *SnapshotCluster `locationName:"cluster" type:"structure"`

	CreateTime *string `locationName:"createTime" type:"string"`

	Description *string `locationName:"description" type:"string"`

	ExpirationTime *string `locationName:"expirationTime" type:"string"`

	Name *string `locationName:"name" type:"string"`

	ResourceVersion *string `locationName:"resourceVersion" type:"string"`

	Status *string `locationName:"status" type:"string"`
}

// String returns the string representation
func (s Snapshot) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s Snapshot) MarshalFields(e protocol.FieldEncoder) error {
	if s.Cluster != nil {
		v := s.Cluster

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "cluster", v, metadata)
	}
	if s.CreateTime != nil {
		v := *s.CreateTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "createTime", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ExpirationTime != nil {
		v := *s.ExpirationTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "expirationTime", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ResourceVersion != nil {
		v := *s.ResourceVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "resourceVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Status != nil {
		v := *s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

type SnapshotCluster struct {
	_ struct{} `type:"structure"`

	KubernetesVersion *string `locationName:"kubernetesVersion" type:"string"`

	Name *string `locationName:"name" type:"string"`

	NodePools []SnapshotNodePool `locationName:"nodePools" type:"list"`
}

// String returns the string representation
func (s SnapshotCluster) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s SnapshotCluster) MarshalFields(e protocol.FieldEncoder) error {
	if s.KubernetesVersion != nil {
		v := *s.KubernetesVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "kubernetesVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NodePools != nil {
		v := s.NodePools

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "nodePools", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

type SnapshotNodePool struct {
	_ struct{} `type:"structure"`

	InstanceType *string `locationName:"instanceType" type:"string"`

	Name *string `locationName:"name" type:"string"`

	NodeCount *int64 `locationName:"nodeCount" type:"integer"`
}

// String returns the string representation
func (s SnapshotNodePool) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s SnapshotNodePool) MarshalFields(e protocol.FieldEncoder) error {
	if s.InstanceType != nil {
		v := *s.InstanceType

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "instanceType", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NodeCount != nil {
		v := *s.NodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "nodeCount", protocol.Int64Value(v), metadata)
	}
	return nil
}

type UpdateClusterRequestCluster struct {
	_ struct{} `type:"structure"`

	AddonsConfig *AddonsConfig `locationName:"addonsConfig" type:"structure"`

	Description *string `locationName:"description" type:"string"`

	KubernetesVersion *string `locationName:"kubernetesVersion" type:"string"`

	Name *string `locationName:"name" type:"string"`
}

// String returns the string representation
func (s UpdateClusterRequestCluster) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateClusterRequestCluster) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateClusterRequestCluster"}
	if s.AddonsConfig != nil {
		if err := s.AddonsConfig.Validate(); err != nil {
			invalidParams.AddNested("AddonsConfig", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateClusterRequestCluster) MarshalFields(e protocol.FieldEncoder) error {
	if s.AddonsConfig != nil {
		v := s.AddonsConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "addonsConfig", v, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.KubernetesVersion != nil {
		v := *s.KubernetesVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "kubernetesVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

type UpdateFirewallGroupRequestFirewallGroup struct {
	_ struct{} `type:"structure"`

	Description *string `locationName:"description" type:"string"`

	Name *string `locationName:"name" type:"string"`
}

// String returns the string representation
func (s UpdateFirewallGroupRequestFirewallGroup) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateFirewallGroupRequestFirewallGroup) MarshalFields(e protocol.FieldEncoder) error {
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

type UpdateSnapshotRequestSnapshot struct {
	_ struct{} `type:"structure"`

	Description *string `locationName:"description" type:"string"`

	ExpirationTime *string `locationName:"expirationTime" type:"string"`

	Name *string `locationName:"name" type:"string"`
}

// String returns the string representation
func (s UpdateSnapshotRequestSnapshot) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateSnapshotRequestSnapshot) MarshalFields(e protocol.FieldEncoder) error {
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ExpirationTime != nil {
		v := *s.ExpirationTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "expirationTime", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}
