// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package hatoba

import (
	"context"

	"github.com/aokumasan/nifcloud-sdk-go-v2/internal/nifcloudutil"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
)

type UpdateSnapshotInput struct {
	_ struct{} `type:"structure"`

	// Snapshot is a required field
	Snapshot *UpdateSnapshotRequestSnapshot `locationName:"snapshot" type:"structure" required:"true"`

	// SnapshotName is a required field
	SnapshotName *string `location:"uri" locationName:"SnapshotName" type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateSnapshotInput) String() string {
	return nifcloudutil.Prettify(s)
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateSnapshotInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateSnapshotInput"}

	if s.Snapshot == nil {
		invalidParams.Add(aws.NewErrParamRequired("Snapshot"))
	}

	if s.SnapshotName == nil {
		invalidParams.Add(aws.NewErrParamRequired("SnapshotName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateSnapshotInput) MarshalFields(e protocol.FieldEncoder) error {
	e.SetValue(protocol.HeaderTarget, "Content-Type", protocol.StringValue("application/json"), protocol.Metadata{})

	if s.Snapshot != nil {
		v := s.Snapshot

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "snapshot", v, metadata)
	}
	if s.SnapshotName != nil {
		v := *s.SnapshotName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "SnapshotName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

type UpdateSnapshotOutput struct {
	_ struct{} `type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`

	Snapshot *Snapshot `locationName:"snapshot" type:"structure"`
}

// String returns the string representation
func (s UpdateSnapshotOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateSnapshotOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Snapshot != nil {
		v := s.Snapshot

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "snapshot", v, metadata)
	}
	return nil
}

const opUpdateSnapshot = "UpdateSnapshot"

// UpdateSnapshotRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using UpdateSnapshotRequest.
//    req := client.UpdateSnapshotRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://docs.aws.amazon.com/goto/WebAPI/hatoba-2019-03-27/UpdateSnapshot
func (c *Client) UpdateSnapshotRequest(input *UpdateSnapshotInput) UpdateSnapshotRequest {
	op := &aws.Operation{
		Name:       opUpdateSnapshot,
		HTTPMethod: "PUT",
		HTTPPath:   "/v1/snapshots/{SnapshotName}",
	}

	if input == nil {
		input = &UpdateSnapshotInput{}
	}

	req := c.newRequest(op, input, &UpdateSnapshotOutput{})
	return UpdateSnapshotRequest{Request: req, Input: input, Copy: c.UpdateSnapshotRequest}
}

// UpdateSnapshotRequest is the request type for the
// UpdateSnapshot API operation.
type UpdateSnapshotRequest struct {
	*aws.Request
	Input *UpdateSnapshotInput
	Copy  func(*UpdateSnapshotInput) UpdateSnapshotRequest
}

// Send marshals and sends the UpdateSnapshot API request.
func (r UpdateSnapshotRequest) Send(ctx context.Context) (*UpdateSnapshotResponse, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	resp := &UpdateSnapshotResponse{
		UpdateSnapshotOutput: r.Request.Data.(*UpdateSnapshotOutput),
		response:             &aws.Response{Request: r.Request},
	}

	return resp, nil
}

// UpdateSnapshotResponse is the response type for the
// UpdateSnapshot API operation.
type UpdateSnapshotResponse struct {
	*UpdateSnapshotOutput

	response *aws.Response
}

// SDKResponseMetdata returns the response metadata for the
// UpdateSnapshot request.
func (r *UpdateSnapshotResponse) SDKResponseMetdata() *aws.Response {
	return r.response
}
