// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package hatoba

import (
	"context"
	"fmt"

	"github.com/alice02/nifcloud-sdk-go-v2/internal/nifcloudutil"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/private/protocol"
)

const opAuthorizeFirewallGroup = "AuthorizeFirewallGroup"

// AuthorizeFirewallGroupRequest is a API request type for the AuthorizeFirewallGroup API operation.
type AuthorizeFirewallGroupRequest struct {
	*aws.Request
	Input *AuthorizeFirewallGroupInput
	Copy  func(*AuthorizeFirewallGroupInput) AuthorizeFirewallGroupRequest
}

// Send marshals and sends the AuthorizeFirewallGroup API request.
func (r AuthorizeFirewallGroupRequest) Send(ctx context.Context) (*AuthorizeFirewallGroupOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*AuthorizeFirewallGroupOutput), nil
}

// AuthorizeFirewallGroupRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the AuthorizeFirewallGroupRequest method.
//    req := client.AuthorizeFirewallGroupRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/AuthorizeFirewallGroup
func (c *Hatoba) AuthorizeFirewallGroupRequest(input *AuthorizeFirewallGroupInput) AuthorizeFirewallGroupRequest {
	op := &aws.Operation{
		Name:       opAuthorizeFirewallGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/v1/firewallGroups/{FirewallGroupName}/rules",
	}

	if input == nil {
		input = &AuthorizeFirewallGroupInput{}
	}

	output := &AuthorizeFirewallGroupOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return AuthorizeFirewallGroupRequest{Request: req, Input: input, Copy: c.AuthorizeFirewallGroupRequest}
}

const opCreateCluster = "CreateCluster"

// CreateClusterRequest is a API request type for the CreateCluster API operation.
type CreateClusterRequest struct {
	*aws.Request
	Input *CreateClusterInput
	Copy  func(*CreateClusterInput) CreateClusterRequest
}

// Send marshals and sends the CreateCluster API request.
func (r CreateClusterRequest) Send(ctx context.Context) (*CreateClusterOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateClusterOutput), nil
}

// CreateClusterRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the CreateClusterRequest method.
//    req := client.CreateClusterRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateCluster
func (c *Hatoba) CreateClusterRequest(input *CreateClusterInput) CreateClusterRequest {
	op := &aws.Operation{
		Name:       opCreateCluster,
		HTTPMethod: "POST",
		HTTPPath:   "/v1/clusters",
	}

	if input == nil {
		input = &CreateClusterInput{}
	}

	output := &CreateClusterOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateClusterRequest{Request: req, Input: input, Copy: c.CreateClusterRequest}
}

const opCreateFirewallGroup = "CreateFirewallGroup"

// CreateFirewallGroupRequest is a API request type for the CreateFirewallGroup API operation.
type CreateFirewallGroupRequest struct {
	*aws.Request
	Input *CreateFirewallGroupInput
	Copy  func(*CreateFirewallGroupInput) CreateFirewallGroupRequest
}

// Send marshals and sends the CreateFirewallGroup API request.
func (r CreateFirewallGroupRequest) Send(ctx context.Context) (*CreateFirewallGroupOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateFirewallGroupOutput), nil
}

// CreateFirewallGroupRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the CreateFirewallGroupRequest method.
//    req := client.CreateFirewallGroupRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateFirewallGroup
func (c *Hatoba) CreateFirewallGroupRequest(input *CreateFirewallGroupInput) CreateFirewallGroupRequest {
	op := &aws.Operation{
		Name:       opCreateFirewallGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/v1/firewallGroups",
	}

	if input == nil {
		input = &CreateFirewallGroupInput{}
	}

	output := &CreateFirewallGroupOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateFirewallGroupRequest{Request: req, Input: input, Copy: c.CreateFirewallGroupRequest}
}

const opCreateNodePool = "CreateNodePool"

// CreateNodePoolRequest is a API request type for the CreateNodePool API operation.
type CreateNodePoolRequest struct {
	*aws.Request
	Input *CreateNodePoolInput
	Copy  func(*CreateNodePoolInput) CreateNodePoolRequest
}

// Send marshals and sends the CreateNodePool API request.
func (r CreateNodePoolRequest) Send(ctx context.Context) (*CreateNodePoolOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateNodePoolOutput), nil
}

// CreateNodePoolRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the CreateNodePoolRequest method.
//    req := client.CreateNodePoolRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateNodePool
func (c *Hatoba) CreateNodePoolRequest(input *CreateNodePoolInput) CreateNodePoolRequest {
	op := &aws.Operation{
		Name:       opCreateNodePool,
		HTTPMethod: "POST",
		HTTPPath:   "/v1/clusters/{ClusterName}/nodePools",
	}

	if input == nil {
		input = &CreateNodePoolInput{}
	}

	output := &CreateNodePoolOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateNodePoolRequest{Request: req, Input: input, Copy: c.CreateNodePoolRequest}
}

const opCreateSnapshot = "CreateSnapshot"

// CreateSnapshotRequest is a API request type for the CreateSnapshot API operation.
type CreateSnapshotRequest struct {
	*aws.Request
	Input *CreateSnapshotInput
	Copy  func(*CreateSnapshotInput) CreateSnapshotRequest
}

// Send marshals and sends the CreateSnapshot API request.
func (r CreateSnapshotRequest) Send(ctx context.Context) (*CreateSnapshotOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*CreateSnapshotOutput), nil
}

// CreateSnapshotRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the CreateSnapshotRequest method.
//    req := client.CreateSnapshotRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateSnapshot
func (c *Hatoba) CreateSnapshotRequest(input *CreateSnapshotInput) CreateSnapshotRequest {
	op := &aws.Operation{
		Name:       opCreateSnapshot,
		HTTPMethod: "POST",
		HTTPPath:   "/v1/snapshots",
	}

	if input == nil {
		input = &CreateSnapshotInput{}
	}

	output := &CreateSnapshotOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return CreateSnapshotRequest{Request: req, Input: input, Copy: c.CreateSnapshotRequest}
}

const opDeleteCluster = "DeleteCluster"

// DeleteClusterRequest is a API request type for the DeleteCluster API operation.
type DeleteClusterRequest struct {
	*aws.Request
	Input *DeleteClusterInput
	Copy  func(*DeleteClusterInput) DeleteClusterRequest
}

// Send marshals and sends the DeleteCluster API request.
func (r DeleteClusterRequest) Send(ctx context.Context) (*DeleteClusterOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteClusterOutput), nil
}

// DeleteClusterRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the DeleteClusterRequest method.
//    req := client.DeleteClusterRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteCluster
func (c *Hatoba) DeleteClusterRequest(input *DeleteClusterInput) DeleteClusterRequest {
	op := &aws.Operation{
		Name:       opDeleteCluster,
		HTTPMethod: "DELETE",
		HTTPPath:   "/v1/clusters/{ClusterName}",
	}

	if input == nil {
		input = &DeleteClusterInput{}
	}

	output := &DeleteClusterOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteClusterRequest{Request: req, Input: input, Copy: c.DeleteClusterRequest}
}

const opDeleteClusters = "DeleteClusters"

// DeleteClustersRequest is a API request type for the DeleteClusters API operation.
type DeleteClustersRequest struct {
	*aws.Request
	Input *DeleteClustersInput
	Copy  func(*DeleteClustersInput) DeleteClustersRequest
}

// Send marshals and sends the DeleteClusters API request.
func (r DeleteClustersRequest) Send(ctx context.Context) (*DeleteClustersOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteClustersOutput), nil
}

// DeleteClustersRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the DeleteClustersRequest method.
//    req := client.DeleteClustersRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteClusters
func (c *Hatoba) DeleteClustersRequest(input *DeleteClustersInput) DeleteClustersRequest {
	op := &aws.Operation{
		Name:       opDeleteClusters,
		HTTPMethod: "DELETE",
		HTTPPath:   "/v1/clusters",
	}

	if input == nil {
		input = &DeleteClustersInput{}
	}

	output := &DeleteClustersOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteClustersRequest{Request: req, Input: input, Copy: c.DeleteClustersRequest}
}

const opDeleteFirewallGroup = "DeleteFirewallGroup"

// DeleteFirewallGroupRequest is a API request type for the DeleteFirewallGroup API operation.
type DeleteFirewallGroupRequest struct {
	*aws.Request
	Input *DeleteFirewallGroupInput
	Copy  func(*DeleteFirewallGroupInput) DeleteFirewallGroupRequest
}

// Send marshals and sends the DeleteFirewallGroup API request.
func (r DeleteFirewallGroupRequest) Send(ctx context.Context) (*DeleteFirewallGroupOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteFirewallGroupOutput), nil
}

// DeleteFirewallGroupRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the DeleteFirewallGroupRequest method.
//    req := client.DeleteFirewallGroupRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteFirewallGroup
func (c *Hatoba) DeleteFirewallGroupRequest(input *DeleteFirewallGroupInput) DeleteFirewallGroupRequest {
	op := &aws.Operation{
		Name:       opDeleteFirewallGroup,
		HTTPMethod: "DELETE",
		HTTPPath:   "/v1/firewallGroups/{FirewallGroupName}",
	}

	if input == nil {
		input = &DeleteFirewallGroupInput{}
	}

	output := &DeleteFirewallGroupOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteFirewallGroupRequest{Request: req, Input: input, Copy: c.DeleteFirewallGroupRequest}
}

const opDeleteFirewallGroups = "DeleteFirewallGroups"

// DeleteFirewallGroupsRequest is a API request type for the DeleteFirewallGroups API operation.
type DeleteFirewallGroupsRequest struct {
	*aws.Request
	Input *DeleteFirewallGroupsInput
	Copy  func(*DeleteFirewallGroupsInput) DeleteFirewallGroupsRequest
}

// Send marshals and sends the DeleteFirewallGroups API request.
func (r DeleteFirewallGroupsRequest) Send(ctx context.Context) (*DeleteFirewallGroupsOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteFirewallGroupsOutput), nil
}

// DeleteFirewallGroupsRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the DeleteFirewallGroupsRequest method.
//    req := client.DeleteFirewallGroupsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteFirewallGroups
func (c *Hatoba) DeleteFirewallGroupsRequest(input *DeleteFirewallGroupsInput) DeleteFirewallGroupsRequest {
	op := &aws.Operation{
		Name:       opDeleteFirewallGroups,
		HTTPMethod: "DELETE",
		HTTPPath:   "/v1/firewallGroups",
	}

	if input == nil {
		input = &DeleteFirewallGroupsInput{}
	}

	output := &DeleteFirewallGroupsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteFirewallGroupsRequest{Request: req, Input: input, Copy: c.DeleteFirewallGroupsRequest}
}

const opDeleteNodePool = "DeleteNodePool"

// DeleteNodePoolRequest is a API request type for the DeleteNodePool API operation.
type DeleteNodePoolRequest struct {
	*aws.Request
	Input *DeleteNodePoolInput
	Copy  func(*DeleteNodePoolInput) DeleteNodePoolRequest
}

// Send marshals and sends the DeleteNodePool API request.
func (r DeleteNodePoolRequest) Send(ctx context.Context) (*DeleteNodePoolOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteNodePoolOutput), nil
}

// DeleteNodePoolRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the DeleteNodePoolRequest method.
//    req := client.DeleteNodePoolRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteNodePool
func (c *Hatoba) DeleteNodePoolRequest(input *DeleteNodePoolInput) DeleteNodePoolRequest {
	op := &aws.Operation{
		Name:       opDeleteNodePool,
		HTTPMethod: "DELETE",
		HTTPPath:   "/v1/clusters/{ClusterName}/nodePools/{NodePoolName}",
	}

	if input == nil {
		input = &DeleteNodePoolInput{}
	}

	output := &DeleteNodePoolOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteNodePoolRequest{Request: req, Input: input, Copy: c.DeleteNodePoolRequest}
}

const opDeleteNodePools = "DeleteNodePools"

// DeleteNodePoolsRequest is a API request type for the DeleteNodePools API operation.
type DeleteNodePoolsRequest struct {
	*aws.Request
	Input *DeleteNodePoolsInput
	Copy  func(*DeleteNodePoolsInput) DeleteNodePoolsRequest
}

// Send marshals and sends the DeleteNodePools API request.
func (r DeleteNodePoolsRequest) Send(ctx context.Context) (*DeleteNodePoolsOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteNodePoolsOutput), nil
}

// DeleteNodePoolsRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the DeleteNodePoolsRequest method.
//    req := client.DeleteNodePoolsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteNodePools
func (c *Hatoba) DeleteNodePoolsRequest(input *DeleteNodePoolsInput) DeleteNodePoolsRequest {
	op := &aws.Operation{
		Name:       opDeleteNodePools,
		HTTPMethod: "DELETE",
		HTTPPath:   "/v1/clusters/{ClusterName}/nodePools",
	}

	if input == nil {
		input = &DeleteNodePoolsInput{}
	}

	output := &DeleteNodePoolsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteNodePoolsRequest{Request: req, Input: input, Copy: c.DeleteNodePoolsRequest}
}

const opDeleteSnapshot = "DeleteSnapshot"

// DeleteSnapshotRequest is a API request type for the DeleteSnapshot API operation.
type DeleteSnapshotRequest struct {
	*aws.Request
	Input *DeleteSnapshotInput
	Copy  func(*DeleteSnapshotInput) DeleteSnapshotRequest
}

// Send marshals and sends the DeleteSnapshot API request.
func (r DeleteSnapshotRequest) Send(ctx context.Context) (*DeleteSnapshotOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteSnapshotOutput), nil
}

// DeleteSnapshotRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the DeleteSnapshotRequest method.
//    req := client.DeleteSnapshotRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteSnapshot
func (c *Hatoba) DeleteSnapshotRequest(input *DeleteSnapshotInput) DeleteSnapshotRequest {
	op := &aws.Operation{
		Name:       opDeleteSnapshot,
		HTTPMethod: "DELETE",
		HTTPPath:   "/v1/snapshots/{SnapshotName}",
	}

	if input == nil {
		input = &DeleteSnapshotInput{}
	}

	output := &DeleteSnapshotOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteSnapshotRequest{Request: req, Input: input, Copy: c.DeleteSnapshotRequest}
}

const opDeleteSnapshots = "DeleteSnapshots"

// DeleteSnapshotsRequest is a API request type for the DeleteSnapshots API operation.
type DeleteSnapshotsRequest struct {
	*aws.Request
	Input *DeleteSnapshotsInput
	Copy  func(*DeleteSnapshotsInput) DeleteSnapshotsRequest
}

// Send marshals and sends the DeleteSnapshots API request.
func (r DeleteSnapshotsRequest) Send(ctx context.Context) (*DeleteSnapshotsOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*DeleteSnapshotsOutput), nil
}

// DeleteSnapshotsRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the DeleteSnapshotsRequest method.
//    req := client.DeleteSnapshotsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteSnapshots
func (c *Hatoba) DeleteSnapshotsRequest(input *DeleteSnapshotsInput) DeleteSnapshotsRequest {
	op := &aws.Operation{
		Name:       opDeleteSnapshots,
		HTTPMethod: "DELETE",
		HTTPPath:   "/v1/snapshots",
	}

	if input == nil {
		input = &DeleteSnapshotsInput{}
	}

	output := &DeleteSnapshotsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return DeleteSnapshotsRequest{Request: req, Input: input, Copy: c.DeleteSnapshotsRequest}
}

const opGetCluster = "GetCluster"

// GetClusterRequest is a API request type for the GetCluster API operation.
type GetClusterRequest struct {
	*aws.Request
	Input *GetClusterInput
	Copy  func(*GetClusterInput) GetClusterRequest
}

// Send marshals and sends the GetCluster API request.
func (r GetClusterRequest) Send(ctx context.Context) (*GetClusterOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetClusterOutput), nil
}

// GetClusterRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the GetClusterRequest method.
//    req := client.GetClusterRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetCluster
func (c *Hatoba) GetClusterRequest(input *GetClusterInput) GetClusterRequest {
	op := &aws.Operation{
		Name:       opGetCluster,
		HTTPMethod: "GET",
		HTTPPath:   "/v1/clusters/{ClusterName}",
	}

	if input == nil {
		input = &GetClusterInput{}
	}

	output := &GetClusterOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetClusterRequest{Request: req, Input: input, Copy: c.GetClusterRequest}
}

const opGetClusterCredentials = "GetClusterCredentials"

// GetClusterCredentialsRequest is a API request type for the GetClusterCredentials API operation.
type GetClusterCredentialsRequest struct {
	*aws.Request
	Input *GetClusterCredentialsInput
	Copy  func(*GetClusterCredentialsInput) GetClusterCredentialsRequest
}

// Send marshals and sends the GetClusterCredentials API request.
func (r GetClusterCredentialsRequest) Send(ctx context.Context) (*GetClusterCredentialsOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetClusterCredentialsOutput), nil
}

// GetClusterCredentialsRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the GetClusterCredentialsRequest method.
//    req := client.GetClusterCredentialsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetClusterCredentials
func (c *Hatoba) GetClusterCredentialsRequest(input *GetClusterCredentialsInput) GetClusterCredentialsRequest {
	op := &aws.Operation{
		Name:       opGetClusterCredentials,
		HTTPMethod: "GET",
		HTTPPath:   "/v1/clusters/{ClusterName}/credentials",
	}

	if input == nil {
		input = &GetClusterCredentialsInput{}
	}

	output := &GetClusterCredentialsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetClusterCredentialsRequest{Request: req, Input: input, Copy: c.GetClusterCredentialsRequest}
}

const opGetFirewallGroup = "GetFirewallGroup"

// GetFirewallGroupRequest is a API request type for the GetFirewallGroup API operation.
type GetFirewallGroupRequest struct {
	*aws.Request
	Input *GetFirewallGroupInput
	Copy  func(*GetFirewallGroupInput) GetFirewallGroupRequest
}

// Send marshals and sends the GetFirewallGroup API request.
func (r GetFirewallGroupRequest) Send(ctx context.Context) (*GetFirewallGroupOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetFirewallGroupOutput), nil
}

// GetFirewallGroupRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the GetFirewallGroupRequest method.
//    req := client.GetFirewallGroupRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetFirewallGroup
func (c *Hatoba) GetFirewallGroupRequest(input *GetFirewallGroupInput) GetFirewallGroupRequest {
	op := &aws.Operation{
		Name:       opGetFirewallGroup,
		HTTPMethod: "GET",
		HTTPPath:   "/v1/firewallGroups/{FirewallGroupName}",
	}

	if input == nil {
		input = &GetFirewallGroupInput{}
	}

	output := &GetFirewallGroupOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetFirewallGroupRequest{Request: req, Input: input, Copy: c.GetFirewallGroupRequest}
}

const opGetNodePool = "GetNodePool"

// GetNodePoolRequest is a API request type for the GetNodePool API operation.
type GetNodePoolRequest struct {
	*aws.Request
	Input *GetNodePoolInput
	Copy  func(*GetNodePoolInput) GetNodePoolRequest
}

// Send marshals and sends the GetNodePool API request.
func (r GetNodePoolRequest) Send(ctx context.Context) (*GetNodePoolOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetNodePoolOutput), nil
}

// GetNodePoolRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the GetNodePoolRequest method.
//    req := client.GetNodePoolRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetNodePool
func (c *Hatoba) GetNodePoolRequest(input *GetNodePoolInput) GetNodePoolRequest {
	op := &aws.Operation{
		Name:       opGetNodePool,
		HTTPMethod: "GET",
		HTTPPath:   "/v1/clusters/{ClusterName}/nodePools/{NodePoolName}",
	}

	if input == nil {
		input = &GetNodePoolInput{}
	}

	output := &GetNodePoolOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetNodePoolRequest{Request: req, Input: input, Copy: c.GetNodePoolRequest}
}

const opGetServerConfig = "GetServerConfig"

// GetServerConfigRequest is a API request type for the GetServerConfig API operation.
type GetServerConfigRequest struct {
	*aws.Request
	Input *GetServerConfigInput
	Copy  func(*GetServerConfigInput) GetServerConfigRequest
}

// Send marshals and sends the GetServerConfig API request.
func (r GetServerConfigRequest) Send(ctx context.Context) (*GetServerConfigOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetServerConfigOutput), nil
}

// GetServerConfigRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the GetServerConfigRequest method.
//    req := client.GetServerConfigRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetServerConfig
func (c *Hatoba) GetServerConfigRequest(input *GetServerConfigInput) GetServerConfigRequest {
	op := &aws.Operation{
		Name:       opGetServerConfig,
		HTTPMethod: "GET",
		HTTPPath:   "/v1/serverConfig",
	}

	if input == nil {
		input = &GetServerConfigInput{}
	}

	output := &GetServerConfigOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetServerConfigRequest{Request: req, Input: input, Copy: c.GetServerConfigRequest}
}

const opGetSnapshot = "GetSnapshot"

// GetSnapshotRequest is a API request type for the GetSnapshot API operation.
type GetSnapshotRequest struct {
	*aws.Request
	Input *GetSnapshotInput
	Copy  func(*GetSnapshotInput) GetSnapshotRequest
}

// Send marshals and sends the GetSnapshot API request.
func (r GetSnapshotRequest) Send(ctx context.Context) (*GetSnapshotOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*GetSnapshotOutput), nil
}

// GetSnapshotRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the GetSnapshotRequest method.
//    req := client.GetSnapshotRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetSnapshot
func (c *Hatoba) GetSnapshotRequest(input *GetSnapshotInput) GetSnapshotRequest {
	op := &aws.Operation{
		Name:       opGetSnapshot,
		HTTPMethod: "GET",
		HTTPPath:   "/v1/snapshots/{SnapshotName}",
	}

	if input == nil {
		input = &GetSnapshotInput{}
	}

	output := &GetSnapshotOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return GetSnapshotRequest{Request: req, Input: input, Copy: c.GetSnapshotRequest}
}

const opListClusters = "ListClusters"

// ListClustersRequest is a API request type for the ListClusters API operation.
type ListClustersRequest struct {
	*aws.Request
	Input *ListClustersInput
	Copy  func(*ListClustersInput) ListClustersRequest
}

// Send marshals and sends the ListClusters API request.
func (r ListClustersRequest) Send(ctx context.Context) (*ListClustersOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListClustersOutput), nil
}

// ListClustersRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the ListClustersRequest method.
//    req := client.ListClustersRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ListClusters
func (c *Hatoba) ListClustersRequest(input *ListClustersInput) ListClustersRequest {
	op := &aws.Operation{
		Name:       opListClusters,
		HTTPMethod: "GET",
		HTTPPath:   "/v1/clusters",
	}

	if input == nil {
		input = &ListClustersInput{}
	}

	output := &ListClustersOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListClustersRequest{Request: req, Input: input, Copy: c.ListClustersRequest}
}

const opListFirewallGroups = "ListFirewallGroups"

// ListFirewallGroupsRequest is a API request type for the ListFirewallGroups API operation.
type ListFirewallGroupsRequest struct {
	*aws.Request
	Input *ListFirewallGroupsInput
	Copy  func(*ListFirewallGroupsInput) ListFirewallGroupsRequest
}

// Send marshals and sends the ListFirewallGroups API request.
func (r ListFirewallGroupsRequest) Send(ctx context.Context) (*ListFirewallGroupsOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListFirewallGroupsOutput), nil
}

// ListFirewallGroupsRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the ListFirewallGroupsRequest method.
//    req := client.ListFirewallGroupsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ListFirewallGroups
func (c *Hatoba) ListFirewallGroupsRequest(input *ListFirewallGroupsInput) ListFirewallGroupsRequest {
	op := &aws.Operation{
		Name:       opListFirewallGroups,
		HTTPMethod: "GET",
		HTTPPath:   "/v1/firewallGroups",
	}

	if input == nil {
		input = &ListFirewallGroupsInput{}
	}

	output := &ListFirewallGroupsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListFirewallGroupsRequest{Request: req, Input: input, Copy: c.ListFirewallGroupsRequest}
}

const opListNodePools = "ListNodePools"

// ListNodePoolsRequest is a API request type for the ListNodePools API operation.
type ListNodePoolsRequest struct {
	*aws.Request
	Input *ListNodePoolsInput
	Copy  func(*ListNodePoolsInput) ListNodePoolsRequest
}

// Send marshals and sends the ListNodePools API request.
func (r ListNodePoolsRequest) Send(ctx context.Context) (*ListNodePoolsOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListNodePoolsOutput), nil
}

// ListNodePoolsRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the ListNodePoolsRequest method.
//    req := client.ListNodePoolsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ListNodePools
func (c *Hatoba) ListNodePoolsRequest(input *ListNodePoolsInput) ListNodePoolsRequest {
	op := &aws.Operation{
		Name:       opListNodePools,
		HTTPMethod: "GET",
		HTTPPath:   "/v1/clusters/{ClusterName}/nodePools",
	}

	if input == nil {
		input = &ListNodePoolsInput{}
	}

	output := &ListNodePoolsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListNodePoolsRequest{Request: req, Input: input, Copy: c.ListNodePoolsRequest}
}

const opListSnapshots = "ListSnapshots"

// ListSnapshotsRequest is a API request type for the ListSnapshots API operation.
type ListSnapshotsRequest struct {
	*aws.Request
	Input *ListSnapshotsInput
	Copy  func(*ListSnapshotsInput) ListSnapshotsRequest
}

// Send marshals and sends the ListSnapshots API request.
func (r ListSnapshotsRequest) Send(ctx context.Context) (*ListSnapshotsOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*ListSnapshotsOutput), nil
}

// ListSnapshotsRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the ListSnapshotsRequest method.
//    req := client.ListSnapshotsRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ListSnapshots
func (c *Hatoba) ListSnapshotsRequest(input *ListSnapshotsInput) ListSnapshotsRequest {
	op := &aws.Operation{
		Name:       opListSnapshots,
		HTTPMethod: "GET",
		HTTPPath:   "/v1/snapshots",
	}

	if input == nil {
		input = &ListSnapshotsInput{}
	}

	output := &ListSnapshotsOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return ListSnapshotsRequest{Request: req, Input: input, Copy: c.ListSnapshotsRequest}
}

const opRestoreClusterFromSnapshot = "RestoreClusterFromSnapshot"

// RestoreClusterFromSnapshotRequest is a API request type for the RestoreClusterFromSnapshot API operation.
type RestoreClusterFromSnapshotRequest struct {
	*aws.Request
	Input *RestoreClusterFromSnapshotInput
	Copy  func(*RestoreClusterFromSnapshotInput) RestoreClusterFromSnapshotRequest
}

// Send marshals and sends the RestoreClusterFromSnapshot API request.
func (r RestoreClusterFromSnapshotRequest) Send(ctx context.Context) (*RestoreClusterFromSnapshotOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*RestoreClusterFromSnapshotOutput), nil
}

// RestoreClusterFromSnapshotRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the RestoreClusterFromSnapshotRequest method.
//    req := client.RestoreClusterFromSnapshotRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/RestoreClusterFromSnapshot
func (c *Hatoba) RestoreClusterFromSnapshotRequest(input *RestoreClusterFromSnapshotInput) RestoreClusterFromSnapshotRequest {
	op := &aws.Operation{
		Name:       opRestoreClusterFromSnapshot,
		HTTPMethod: "POST",
		HTTPPath:   "/v1/snapshots/{SnapshotName}:restore",
	}

	if input == nil {
		input = &RestoreClusterFromSnapshotInput{}
	}

	output := &RestoreClusterFromSnapshotOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return RestoreClusterFromSnapshotRequest{Request: req, Input: input, Copy: c.RestoreClusterFromSnapshotRequest}
}

const opRevokeFirewallGroup = "RevokeFirewallGroup"

// RevokeFirewallGroupRequest is a API request type for the RevokeFirewallGroup API operation.
type RevokeFirewallGroupRequest struct {
	*aws.Request
	Input *RevokeFirewallGroupInput
	Copy  func(*RevokeFirewallGroupInput) RevokeFirewallGroupRequest
}

// Send marshals and sends the RevokeFirewallGroup API request.
func (r RevokeFirewallGroupRequest) Send(ctx context.Context) (*RevokeFirewallGroupOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*RevokeFirewallGroupOutput), nil
}

// RevokeFirewallGroupRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the RevokeFirewallGroupRequest method.
//    req := client.RevokeFirewallGroupRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/RevokeFirewallGroup
func (c *Hatoba) RevokeFirewallGroupRequest(input *RevokeFirewallGroupInput) RevokeFirewallGroupRequest {
	op := &aws.Operation{
		Name:       opRevokeFirewallGroup,
		HTTPMethod: "DELETE",
		HTTPPath:   "/v1/firewallGroups/{FirewallGroupName}/rules",
	}

	if input == nil {
		input = &RevokeFirewallGroupInput{}
	}

	output := &RevokeFirewallGroupOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return RevokeFirewallGroupRequest{Request: req, Input: input, Copy: c.RevokeFirewallGroupRequest}
}

const opSetNodePoolSize = "SetNodePoolSize"

// SetNodePoolSizeRequest is a API request type for the SetNodePoolSize API operation.
type SetNodePoolSizeRequest struct {
	*aws.Request
	Input *SetNodePoolSizeInput
	Copy  func(*SetNodePoolSizeInput) SetNodePoolSizeRequest
}

// Send marshals and sends the SetNodePoolSize API request.
func (r SetNodePoolSizeRequest) Send(ctx context.Context) (*SetNodePoolSizeOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*SetNodePoolSizeOutput), nil
}

// SetNodePoolSizeRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the SetNodePoolSizeRequest method.
//    req := client.SetNodePoolSizeRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/SetNodePoolSize
func (c *Hatoba) SetNodePoolSizeRequest(input *SetNodePoolSizeInput) SetNodePoolSizeRequest {
	op := &aws.Operation{
		Name:       opSetNodePoolSize,
		HTTPMethod: "POST",
		HTTPPath:   "/v1/clusters/{ClusterName}/nodePools/{NodePoolName}:setSize",
	}

	if input == nil {
		input = &SetNodePoolSizeInput{}
	}

	output := &SetNodePoolSizeOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return SetNodePoolSizeRequest{Request: req, Input: input, Copy: c.SetNodePoolSizeRequest}
}

const opUpdateCluster = "UpdateCluster"

// UpdateClusterRequest is a API request type for the UpdateCluster API operation.
type UpdateClusterRequest struct {
	*aws.Request
	Input *UpdateClusterInput
	Copy  func(*UpdateClusterInput) UpdateClusterRequest
}

// Send marshals and sends the UpdateCluster API request.
func (r UpdateClusterRequest) Send(ctx context.Context) (*UpdateClusterOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateClusterOutput), nil
}

// UpdateClusterRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the UpdateClusterRequest method.
//    req := client.UpdateClusterRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/UpdateCluster
func (c *Hatoba) UpdateClusterRequest(input *UpdateClusterInput) UpdateClusterRequest {
	op := &aws.Operation{
		Name:       opUpdateCluster,
		HTTPMethod: "PUT",
		HTTPPath:   "/v1/clusters/{ClusterName}",
	}

	if input == nil {
		input = &UpdateClusterInput{}
	}

	output := &UpdateClusterOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateClusterRequest{Request: req, Input: input, Copy: c.UpdateClusterRequest}
}

const opUpdateFirewallGroup = "UpdateFirewallGroup"

// UpdateFirewallGroupRequest is a API request type for the UpdateFirewallGroup API operation.
type UpdateFirewallGroupRequest struct {
	*aws.Request
	Input *UpdateFirewallGroupInput
	Copy  func(*UpdateFirewallGroupInput) UpdateFirewallGroupRequest
}

// Send marshals and sends the UpdateFirewallGroup API request.
func (r UpdateFirewallGroupRequest) Send(ctx context.Context) (*UpdateFirewallGroupOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateFirewallGroupOutput), nil
}

// UpdateFirewallGroupRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the UpdateFirewallGroupRequest method.
//    req := client.UpdateFirewallGroupRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/UpdateFirewallGroup
func (c *Hatoba) UpdateFirewallGroupRequest(input *UpdateFirewallGroupInput) UpdateFirewallGroupRequest {
	op := &aws.Operation{
		Name:       opUpdateFirewallGroup,
		HTTPMethod: "PUT",
		HTTPPath:   "/v1/firewallGroups/{FirewallGroupName}",
	}

	if input == nil {
		input = &UpdateFirewallGroupInput{}
	}

	output := &UpdateFirewallGroupOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateFirewallGroupRequest{Request: req, Input: input, Copy: c.UpdateFirewallGroupRequest}
}

const opUpdateSnapshot = "UpdateSnapshot"

// UpdateSnapshotRequest is a API request type for the UpdateSnapshot API operation.
type UpdateSnapshotRequest struct {
	*aws.Request
	Input *UpdateSnapshotInput
	Copy  func(*UpdateSnapshotInput) UpdateSnapshotRequest
}

// Send marshals and sends the UpdateSnapshot API request.
func (r UpdateSnapshotRequest) Send(ctx context.Context) (*UpdateSnapshotOutput, error) {
	r.Request.SetContext(ctx)
	err := r.Request.Send()
	if err != nil {
		return nil, err
	}

	return r.Request.Data.(*UpdateSnapshotOutput), nil
}

// UpdateSnapshotRequest returns a request value for making API operation for
// NIFCLOUD Hatoba beta.
//
//    // Example sending a request using the UpdateSnapshotRequest method.
//    req := client.UpdateSnapshotRequest(params)
//    resp, err := req.Send(context.TODO())
//    if err == nil {
//        fmt.Println(resp)
//    }
//
// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/UpdateSnapshot
func (c *Hatoba) UpdateSnapshotRequest(input *UpdateSnapshotInput) UpdateSnapshotRequest {
	op := &aws.Operation{
		Name:       opUpdateSnapshot,
		HTTPMethod: "PUT",
		HTTPPath:   "/v1/snapshots/{SnapshotName}",
	}

	if input == nil {
		input = &UpdateSnapshotInput{}
	}

	output := &UpdateSnapshotOutput{}
	req := c.newRequest(op, input, output)
	output.responseMetadata = aws.Response{Request: req}

	return UpdateSnapshotRequest{Request: req, Input: input, Copy: c.UpdateSnapshotRequest}
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/AddonsConfig
type AddonsConfig struct {
	_ struct{} `type:"structure"`

	HttpLoadBalancing *HttpLoadBalancing `locationName:"httpLoadBalancing" type:"structure"`
}

// String returns the string representation
func (s AddonsConfig) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s AddonsConfig) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AddonsConfig) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "AddonsConfig"}
	if s.HttpLoadBalancing != nil {
		if err := s.HttpLoadBalancing.Validate(); err != nil {
			invalidParams.AddNested("HttpLoadBalancing", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s AddonsConfig) MarshalFields(e protocol.FieldEncoder) error {
	if s.HttpLoadBalancing != nil {
		v := s.HttpLoadBalancing

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "httpLoadBalancing", v, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/AuthorizeFirewallGroupRequest
type AuthorizeFirewallGroupInput struct {
	_ struct{} `type:"structure"`

	// FirewallGroupName is a required field
	FirewallGroupName *string `location:"uri" locationName:"FirewallGroupName" type:"string" required:"true"`

	Rules []AuthorizeFirewallGroupRequestFirewallRule `locationName:"rules" type:"list"`
}

// String returns the string representation
func (s AuthorizeFirewallGroupInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s AuthorizeFirewallGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AuthorizeFirewallGroupInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "AuthorizeFirewallGroupInput"}

	if s.FirewallGroupName == nil {
		invalidParams.Add(aws.NewErrParamRequired("FirewallGroupName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s AuthorizeFirewallGroupInput) MarshalFields(e protocol.FieldEncoder) error {

	if len(s.Rules) > 0 {
		v := s.Rules

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "rules", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.FirewallGroupName != nil {
		v := *s.FirewallGroupName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "FirewallGroupName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/AuthorizeFirewallGroupResponse
type AuthorizeFirewallGroupOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	FirewallGroup *FirewallGroupResponse `locationName:"firewallGroup" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s AuthorizeFirewallGroupOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s AuthorizeFirewallGroupOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s AuthorizeFirewallGroupOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s AuthorizeFirewallGroupOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.FirewallGroup != nil {
		v := s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "firewallGroup", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/AuthorizeFirewallGroupRequestFirewallRule
type AuthorizeFirewallGroupRequestFirewallRule struct {
	_ struct{} `type:"structure"`

	CidrIp *string `locationName:"cidrIp" type:"string"`

	Description *string `locationName:"description" type:"string"`

	Direction *string `locationName:"direction" type:"string"`

	FromPort *int64 `locationName:"fromPort" type:"integer"`

	Protocol *string `locationName:"protocol" type:"string"`

	ToPort *int64 `locationName:"toPort" type:"integer"`
}

// String returns the string representation
func (s AuthorizeFirewallGroupRequestFirewallRule) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s AuthorizeFirewallGroupRequestFirewallRule) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s AuthorizeFirewallGroupRequestFirewallRule) MarshalFields(e protocol.FieldEncoder) error {
	if s.CidrIp != nil {
		v := *s.CidrIp

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "cidrIp", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Direction != nil {
		v := *s.Direction

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "direction", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.FromPort != nil {
		v := *s.FromPort

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "fromPort", protocol.Int64Value(v), metadata)
	}
	if s.Protocol != nil {
		v := *s.Protocol

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "protocol", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ToPort != nil {
		v := *s.ToPort

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "toPort", protocol.Int64Value(v), metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/Cluster
type Cluster struct {
	_ struct{} `type:"structure"`

	AddonsConfig *AddonsConfig `locationName:"addonsConfig" type:"structure"`

	CreateTime *string `locationName:"createTime" type:"string"`

	Description *string `locationName:"description" type:"string"`

	FirewallGroup *string `locationName:"firewallGroup" type:"string"`

	InitialKubernetesVersion *string `locationName:"initialKubernetesVersion" type:"string"`

	InitialNodeCount *int64 `locationName:"initialNodeCount" type:"integer"`

	KubernetesVersion *string `locationName:"kubernetesVersion" type:"string"`

	Locations []string `locationName:"locations" type:"list"`

	MasterNodeCount *int64 `locationName:"masterNodeCount" type:"integer"`

	Name *string `locationName:"name" type:"string"`

	NetworkConfig *NetworkConfig `locationName:"networkConfig" type:"structure"`

	NodeCount *int64 `locationName:"nodeCount" type:"integer"`

	NodePools []NodePool `locationName:"nodePools" type:"list"`

	Status *string `locationName:"status" type:"string"`
}

// String returns the string representation
func (s Cluster) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s Cluster) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s Cluster) MarshalFields(e protocol.FieldEncoder) error {
	if s.AddonsConfig != nil {
		v := s.AddonsConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "addonsConfig", v, metadata)
	}
	if s.CreateTime != nil {
		v := *s.CreateTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "createTime", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.FirewallGroup != nil {
		v := *s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "firewallGroup", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.InitialKubernetesVersion != nil {
		v := *s.InitialKubernetesVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "initialKubernetesVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.InitialNodeCount != nil {
		v := *s.InitialNodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "initialNodeCount", protocol.Int64Value(v), metadata)
	}
	if s.KubernetesVersion != nil {
		v := *s.KubernetesVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "kubernetesVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.Locations) > 0 {
		v := s.Locations

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "locations", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddValue(protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v1)})
		}
		ls0.End()

	}
	if s.MasterNodeCount != nil {
		v := *s.MasterNodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "masterNodeCount", protocol.Int64Value(v), metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NetworkConfig != nil {
		v := s.NetworkConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "networkConfig", v, metadata)
	}
	if s.NodeCount != nil {
		v := *s.NodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "nodeCount", protocol.Int64Value(v), metadata)
	}
	if len(s.NodePools) > 0 {
		v := s.NodePools

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "nodePools", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.Status != nil {
		v := *s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateClusterRequest
type CreateClusterInput struct {
	_ struct{} `type:"structure"`

	// Cluster is a required field
	Cluster *CreateClusterRequestCluster `locationName:"cluster" type:"structure" required:"true"`
}

// String returns the string representation
func (s CreateClusterInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateClusterInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateClusterInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateClusterInput"}

	if s.Cluster == nil {
		invalidParams.Add(aws.NewErrParamRequired("Cluster"))
	}
	if s.Cluster != nil {
		if err := s.Cluster.Validate(); err != nil {
			invalidParams.AddNested("Cluster", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateClusterInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.Cluster != nil {
		v := s.Cluster

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "cluster", v, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateClusterResponse
type CreateClusterOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Cluster *Cluster `locationName:"cluster" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s CreateClusterOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateClusterOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateClusterOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateClusterOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.Cluster != nil {
		v := s.Cluster

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "cluster", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateClusterRequestCluster
type CreateClusterRequestCluster struct {
	_ struct{} `type:"structure"`

	AddonsConfig *AddonsConfig `locationName:"addonsConfig" type:"structure"`

	Description *string `locationName:"description" type:"string"`

	// FirewallGroup is a required field
	FirewallGroup *string `locationName:"firewallGroup" type:"string" required:"true"`

	KubernetesVersion *string `locationName:"kubernetesVersion" type:"string"`

	// Locations is a required field
	Locations []string `locationName:"locations" type:"list" required:"true"`

	MasterNodeCount *int64 `locationName:"masterNodeCount" type:"integer"`

	// Name is a required field
	Name *string `locationName:"name" type:"string" required:"true"`

	NetworkConfig *NetworkConfig `locationName:"networkConfig" type:"structure"`

	// NodePools is a required field
	NodePools []CreateClusterRequestNodePool `locationName:"nodePools" type:"list" required:"true"`
}

// String returns the string representation
func (s CreateClusterRequestCluster) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateClusterRequestCluster) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateClusterRequestCluster) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateClusterRequestCluster"}

	if s.FirewallGroup == nil {
		invalidParams.Add(aws.NewErrParamRequired("FirewallGroup"))
	}

	if s.Locations == nil {
		invalidParams.Add(aws.NewErrParamRequired("Locations"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if s.NodePools == nil {
		invalidParams.Add(aws.NewErrParamRequired("NodePools"))
	}
	if s.AddonsConfig != nil {
		if err := s.AddonsConfig.Validate(); err != nil {
			invalidParams.AddNested("AddonsConfig", err.(aws.ErrInvalidParams))
		}
	}
	if s.NetworkConfig != nil {
		if err := s.NetworkConfig.Validate(); err != nil {
			invalidParams.AddNested("NetworkConfig", err.(aws.ErrInvalidParams))
		}
	}
	if s.NodePools != nil {
		for i, v := range s.NodePools {
			if err := v.Validate(); err != nil {
				invalidParams.AddNested(fmt.Sprintf("%s[%v]", "NodePools", i), err.(aws.ErrInvalidParams))
			}
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateClusterRequestCluster) MarshalFields(e protocol.FieldEncoder) error {
	if s.AddonsConfig != nil {
		v := s.AddonsConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "addonsConfig", v, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.FirewallGroup != nil {
		v := *s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "firewallGroup", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.KubernetesVersion != nil {
		v := *s.KubernetesVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "kubernetesVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.Locations) > 0 {
		v := s.Locations

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "locations", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddValue(protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v1)})
		}
		ls0.End()

	}
	if s.MasterNodeCount != nil {
		v := *s.MasterNodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "masterNodeCount", protocol.Int64Value(v), metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NetworkConfig != nil {
		v := s.NetworkConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "networkConfig", v, metadata)
	}
	if len(s.NodePools) > 0 {
		v := s.NodePools

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "nodePools", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateClusterRequestNodePool
type CreateClusterRequestNodePool struct {
	_ struct{} `type:"structure"`

	// InstanceType is a required field
	InstanceType *string `locationName:"instanceType" type:"string" required:"true"`

	// Name is a required field
	Name *string `locationName:"name" type:"string" required:"true"`

	NodeCount *int64 `locationName:"nodeCount" type:"integer"`
}

// String returns the string representation
func (s CreateClusterRequestNodePool) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateClusterRequestNodePool) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateClusterRequestNodePool) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateClusterRequestNodePool"}

	if s.InstanceType == nil {
		invalidParams.Add(aws.NewErrParamRequired("InstanceType"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateClusterRequestNodePool) MarshalFields(e protocol.FieldEncoder) error {
	if s.InstanceType != nil {
		v := *s.InstanceType

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "instanceType", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NodeCount != nil {
		v := *s.NodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "nodeCount", protocol.Int64Value(v), metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateFirewallGroupRequest
type CreateFirewallGroupInput struct {
	_ struct{} `type:"structure"`

	// FirewallGroup is a required field
	FirewallGroup *CreateFirewallGroupRequestFirewallGroup `locationName:"firewallGroup" type:"structure" required:"true"`
}

// String returns the string representation
func (s CreateFirewallGroupInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateFirewallGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateFirewallGroupInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateFirewallGroupInput"}

	if s.FirewallGroup == nil {
		invalidParams.Add(aws.NewErrParamRequired("FirewallGroup"))
	}
	if s.FirewallGroup != nil {
		if err := s.FirewallGroup.Validate(); err != nil {
			invalidParams.AddNested("FirewallGroup", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateFirewallGroupInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.FirewallGroup != nil {
		v := s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "firewallGroup", v, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateFirewallGroupResponse
type CreateFirewallGroupOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	FirewallGroup *FirewallGroupResponse `locationName:"firewallGroup" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s CreateFirewallGroupOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateFirewallGroupOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateFirewallGroupOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateFirewallGroupOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.FirewallGroup != nil {
		v := s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "firewallGroup", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateFirewallGroupRequestFirewallGroup
type CreateFirewallGroupRequestFirewallGroup struct {
	_ struct{} `type:"structure"`

	Description *string `locationName:"description" type:"string"`

	// Name is a required field
	Name *string `locationName:"name" type:"string" required:"true"`
}

// String returns the string representation
func (s CreateFirewallGroupRequestFirewallGroup) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateFirewallGroupRequestFirewallGroup) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateFirewallGroupRequestFirewallGroup) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateFirewallGroupRequestFirewallGroup"}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateFirewallGroupRequestFirewallGroup) MarshalFields(e protocol.FieldEncoder) error {
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateNodePoolRequest
type CreateNodePoolInput struct {
	_ struct{} `type:"structure"`

	// ClusterName is a required field
	ClusterName *string `location:"uri" locationName:"ClusterName" type:"string" required:"true"`

	// NodePool is a required field
	NodePool *CreateClusterRequestNodePool `locationName:"nodePool" type:"structure" required:"true"`
}

// String returns the string representation
func (s CreateNodePoolInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNodePoolInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateNodePoolInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateNodePoolInput"}

	if s.ClusterName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ClusterName"))
	}

	if s.NodePool == nil {
		invalidParams.Add(aws.NewErrParamRequired("NodePool"))
	}
	if s.NodePool != nil {
		if err := s.NodePool.Validate(); err != nil {
			invalidParams.AddNested("NodePool", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateNodePoolInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.NodePool != nil {
		v := s.NodePool

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "nodePool", v, metadata)
	}
	if s.ClusterName != nil {
		v := *s.ClusterName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "ClusterName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateNodePoolResponse
type CreateNodePoolOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NodePool *NodePool `locationName:"nodePool" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s CreateNodePoolOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNodePoolOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateNodePoolOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateNodePoolOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.NodePool != nil {
		v := s.NodePool

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "nodePool", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateSnapshotRequest
type CreateSnapshotInput struct {
	_ struct{} `type:"structure"`

	// Snapshot is a required field
	Snapshot *CreateSnapshotRequestSnapshot `locationName:"snapshot" type:"structure" required:"true"`
}

// String returns the string representation
func (s CreateSnapshotInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSnapshotInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSnapshotInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateSnapshotInput"}

	if s.Snapshot == nil {
		invalidParams.Add(aws.NewErrParamRequired("Snapshot"))
	}
	if s.Snapshot != nil {
		if err := s.Snapshot.Validate(); err != nil {
			invalidParams.AddNested("Snapshot", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateSnapshotInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.Snapshot != nil {
		v := s.Snapshot

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "snapshot", v, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateSnapshotResponse
type CreateSnapshotOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	RequestId *string `locationName:"requestId" type:"string"`

	Snapshot *Snapshot `locationName:"snapshot" type:"structure"`
}

// String returns the string representation
func (s CreateSnapshotOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSnapshotOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s CreateSnapshotOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateSnapshotOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Snapshot != nil {
		v := s.Snapshot

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "snapshot", v, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateSnapshotRequestSnapshot
type CreateSnapshotRequestSnapshot struct {
	_ struct{} `type:"structure"`

	// Cluster is a required field
	Cluster *CreateSnapshotRequestSnapshotCluster `locationName:"cluster" type:"structure" required:"true"`

	Description *string `locationName:"description" type:"string"`

	ExpirationTime *string `locationName:"expirationTime" type:"string"`

	// Name is a required field
	Name *string `locationName:"name" type:"string" required:"true"`
}

// String returns the string representation
func (s CreateSnapshotRequestSnapshot) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSnapshotRequestSnapshot) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateSnapshotRequestSnapshot) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "CreateSnapshotRequestSnapshot"}

	if s.Cluster == nil {
		invalidParams.Add(aws.NewErrParamRequired("Cluster"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateSnapshotRequestSnapshot) MarshalFields(e protocol.FieldEncoder) error {
	if s.Cluster != nil {
		v := s.Cluster

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "cluster", v, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ExpirationTime != nil {
		v := *s.ExpirationTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "expirationTime", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/CreateSnapshotRequestSnapshotCluster
type CreateSnapshotRequestSnapshotCluster struct {
	_ struct{} `type:"structure"`

	Name *string `locationName:"name" type:"string"`
}

// String returns the string representation
func (s CreateSnapshotRequestSnapshotCluster) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateSnapshotRequestSnapshotCluster) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s CreateSnapshotRequestSnapshotCluster) MarshalFields(e protocol.FieldEncoder) error {
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteClusterRequest
type DeleteClusterInput struct {
	_ struct{} `type:"structure"`

	// ClusterName is a required field
	ClusterName *string `location:"uri" locationName:"ClusterName" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteClusterInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteClusterInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteClusterInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteClusterInput"}

	if s.ClusterName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ClusterName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteClusterInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.ClusterName != nil {
		v := *s.ClusterName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "ClusterName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteClusterResponse
type DeleteClusterOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Cluster *Cluster `locationName:"cluster" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s DeleteClusterOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteClusterOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteClusterOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteClusterOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.Cluster != nil {
		v := s.Cluster

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "cluster", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteClustersRequest
type DeleteClustersInput struct {
	_ struct{} `type:"structure"`

	Names *string `location:"querystring" locationName:"names" type:"string"`
}

// String returns the string representation
func (s DeleteClustersInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteClustersInput) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteClustersInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.Names != nil {
		v := *s.Names

		metadata := protocol.Metadata{}
		e.SetValue(protocol.QueryTarget, "names", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteClustersResponse
type DeleteClustersOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Clusters []Cluster `locationName:"clusters" type:"list"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s DeleteClustersOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteClustersOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteClustersOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteClustersOutput) MarshalFields(e protocol.FieldEncoder) error {
	if len(s.Clusters) > 0 {
		v := s.Clusters

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "clusters", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteFirewallGroupRequest
type DeleteFirewallGroupInput struct {
	_ struct{} `type:"structure"`

	// FirewallGroupName is a required field
	FirewallGroupName *string `location:"uri" locationName:"FirewallGroupName" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteFirewallGroupInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteFirewallGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteFirewallGroupInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteFirewallGroupInput"}

	if s.FirewallGroupName == nil {
		invalidParams.Add(aws.NewErrParamRequired("FirewallGroupName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteFirewallGroupInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.FirewallGroupName != nil {
		v := *s.FirewallGroupName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "FirewallGroupName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteFirewallGroupResponse
type DeleteFirewallGroupOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	FirewallGroup *FirewallGroupResponse `locationName:"firewallGroup" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s DeleteFirewallGroupOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteFirewallGroupOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteFirewallGroupOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteFirewallGroupOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.FirewallGroup != nil {
		v := s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "firewallGroup", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteFirewallGroupsRequest
type DeleteFirewallGroupsInput struct {
	_ struct{} `type:"structure"`

	Names *string `location:"querystring" locationName:"names" type:"string"`
}

// String returns the string representation
func (s DeleteFirewallGroupsInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteFirewallGroupsInput) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteFirewallGroupsInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.Names != nil {
		v := *s.Names

		metadata := protocol.Metadata{}
		e.SetValue(protocol.QueryTarget, "names", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteFirewallGroupsResponse
type DeleteFirewallGroupsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	FirewallGroups []FirewallGroupResponse `locationName:"firewallGroups" type:"list"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s DeleteFirewallGroupsOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteFirewallGroupsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteFirewallGroupsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteFirewallGroupsOutput) MarshalFields(e protocol.FieldEncoder) error {
	if len(s.FirewallGroups) > 0 {
		v := s.FirewallGroups

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "firewallGroups", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteNodePoolRequest
type DeleteNodePoolInput struct {
	_ struct{} `type:"structure"`

	// ClusterName is a required field
	ClusterName *string `location:"uri" locationName:"ClusterName" type:"string" required:"true"`

	// NodePoolName is a required field
	NodePoolName *string `location:"uri" locationName:"NodePoolName" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteNodePoolInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNodePoolInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteNodePoolInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteNodePoolInput"}

	if s.ClusterName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ClusterName"))
	}

	if s.NodePoolName == nil {
		invalidParams.Add(aws.NewErrParamRequired("NodePoolName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteNodePoolInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.ClusterName != nil {
		v := *s.ClusterName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "ClusterName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NodePoolName != nil {
		v := *s.NodePoolName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "NodePoolName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteNodePoolResponse
type DeleteNodePoolOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NodePool *NodePool `locationName:"nodePool" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s DeleteNodePoolOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNodePoolOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteNodePoolOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteNodePoolOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.NodePool != nil {
		v := s.NodePool

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "nodePool", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteNodePoolsRequest
type DeleteNodePoolsInput struct {
	_ struct{} `type:"structure"`

	// ClusterName is a required field
	ClusterName *string `location:"uri" locationName:"ClusterName" type:"string" required:"true"`

	Names *string `location:"querystring" locationName:"names" type:"string"`
}

// String returns the string representation
func (s DeleteNodePoolsInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNodePoolsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteNodePoolsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteNodePoolsInput"}

	if s.ClusterName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ClusterName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteNodePoolsInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.ClusterName != nil {
		v := *s.ClusterName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "ClusterName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Names != nil {
		v := *s.Names

		metadata := protocol.Metadata{}
		e.SetValue(protocol.QueryTarget, "names", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteNodePoolsResponse
type DeleteNodePoolsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NodePools []NodePool `locationName:"nodePools" type:"list"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s DeleteNodePoolsOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNodePoolsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteNodePoolsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteNodePoolsOutput) MarshalFields(e protocol.FieldEncoder) error {
	if len(s.NodePools) > 0 {
		v := s.NodePools

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "nodePools", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteSnapshotRequest
type DeleteSnapshotInput struct {
	_ struct{} `type:"structure"`

	// SnapshotName is a required field
	SnapshotName *string `location:"uri" locationName:"SnapshotName" type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteSnapshotInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSnapshotInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteSnapshotInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "DeleteSnapshotInput"}

	if s.SnapshotName == nil {
		invalidParams.Add(aws.NewErrParamRequired("SnapshotName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteSnapshotInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.SnapshotName != nil {
		v := *s.SnapshotName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "SnapshotName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteSnapshotResponse
type DeleteSnapshotOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	RequestId *string `locationName:"requestId" type:"string"`

	Snapshot *Snapshot `locationName:"snapshot" type:"structure"`
}

// String returns the string representation
func (s DeleteSnapshotOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSnapshotOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteSnapshotOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteSnapshotOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Snapshot != nil {
		v := s.Snapshot

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "snapshot", v, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteSnapshotsRequest
type DeleteSnapshotsInput struct {
	_ struct{} `type:"structure"`

	Names *string `location:"querystring" locationName:"names" type:"string"`
}

// String returns the string representation
func (s DeleteSnapshotsInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSnapshotsInput) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteSnapshotsInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.Names != nil {
		v := *s.Names

		metadata := protocol.Metadata{}
		e.SetValue(protocol.QueryTarget, "names", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/DeleteSnapshotsResponse
type DeleteSnapshotsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	RequestId *string `locationName:"requestId" type:"string"`

	Snapshots []Snapshot `locationName:"snapshots" type:"list"`
}

// String returns the string representation
func (s DeleteSnapshotsOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteSnapshotsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s DeleteSnapshotsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s DeleteSnapshotsOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.Snapshots) > 0 {
		v := s.Snapshots

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "snapshots", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/FirewallGroupResponse
type FirewallGroupResponse struct {
	_ struct{} `type:"structure"`

	Description *string `locationName:"description" type:"string"`

	Name *string `locationName:"name" type:"string"`

	Rules []FirewallRule `locationName:"rules" type:"list"`
}

// String returns the string representation
func (s FirewallGroupResponse) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s FirewallGroupResponse) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s FirewallGroupResponse) MarshalFields(e protocol.FieldEncoder) error {
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.Rules) > 0 {
		v := s.Rules

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "rules", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/FirewallRule
type FirewallRule struct {
	_ struct{} `type:"structure"`

	CidrIp *string `locationName:"cidrIp" type:"string"`

	Description *string `locationName:"description" type:"string"`

	Direction *string `locationName:"direction" type:"string"`

	FromPort *int64 `locationName:"fromPort" type:"integer"`

	Id *string `locationName:"id" type:"string"`

	Protocol *string `locationName:"protocol" type:"string"`

	Status *string `locationName:"status" type:"string"`

	ToPort *int64 `locationName:"toPort" type:"integer"`
}

// String returns the string representation
func (s FirewallRule) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s FirewallRule) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s FirewallRule) MarshalFields(e protocol.FieldEncoder) error {
	if s.CidrIp != nil {
		v := *s.CidrIp

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "cidrIp", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Direction != nil {
		v := *s.Direction

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "direction", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.FromPort != nil {
		v := *s.FromPort

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "fromPort", protocol.Int64Value(v), metadata)
	}
	if s.Id != nil {
		v := *s.Id

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "id", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Protocol != nil {
		v := *s.Protocol

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "protocol", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Status != nil {
		v := *s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ToPort != nil {
		v := *s.ToPort

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "toPort", protocol.Int64Value(v), metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetClusterCredentialsRequest
type GetClusterCredentialsInput struct {
	_ struct{} `type:"structure"`

	// ClusterName is a required field
	ClusterName *string `location:"uri" locationName:"ClusterName" type:"string" required:"true"`
}

// String returns the string representation
func (s GetClusterCredentialsInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s GetClusterCredentialsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetClusterCredentialsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetClusterCredentialsInput"}

	if s.ClusterName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ClusterName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s GetClusterCredentialsInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.ClusterName != nil {
		v := *s.ClusterName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "ClusterName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetClusterCredentialsResponse
type GetClusterCredentialsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Credentials *string `locationName:"credentials" type:"string"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s GetClusterCredentialsOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s GetClusterCredentialsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetClusterCredentialsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s GetClusterCredentialsOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.Credentials != nil {
		v := *s.Credentials

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "credentials", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetClusterRequest
type GetClusterInput struct {
	_ struct{} `type:"structure"`

	// ClusterName is a required field
	ClusterName *string `location:"uri" locationName:"ClusterName" type:"string" required:"true"`
}

// String returns the string representation
func (s GetClusterInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s GetClusterInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetClusterInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetClusterInput"}

	if s.ClusterName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ClusterName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s GetClusterInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.ClusterName != nil {
		v := *s.ClusterName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "ClusterName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetClusterResponse
type GetClusterOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Cluster *Cluster `locationName:"cluster" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s GetClusterOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s GetClusterOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetClusterOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s GetClusterOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.Cluster != nil {
		v := s.Cluster

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "cluster", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetFirewallGroupRequest
type GetFirewallGroupInput struct {
	_ struct{} `type:"structure"`

	// FirewallGroupName is a required field
	FirewallGroupName *string `location:"uri" locationName:"FirewallGroupName" type:"string" required:"true"`
}

// String returns the string representation
func (s GetFirewallGroupInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFirewallGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetFirewallGroupInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetFirewallGroupInput"}

	if s.FirewallGroupName == nil {
		invalidParams.Add(aws.NewErrParamRequired("FirewallGroupName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s GetFirewallGroupInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.FirewallGroupName != nil {
		v := *s.FirewallGroupName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "FirewallGroupName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetFirewallGroupResponse
type GetFirewallGroupOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	FirewallGroup *FirewallGroupResponse `locationName:"firewallGroup" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s GetFirewallGroupOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s GetFirewallGroupOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetFirewallGroupOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s GetFirewallGroupOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.FirewallGroup != nil {
		v := s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "firewallGroup", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetNodePoolRequest
type GetNodePoolInput struct {
	_ struct{} `type:"structure"`

	// ClusterName is a required field
	ClusterName *string `location:"uri" locationName:"ClusterName" type:"string" required:"true"`

	// NodePoolName is a required field
	NodePoolName *string `location:"uri" locationName:"NodePoolName" type:"string" required:"true"`
}

// String returns the string representation
func (s GetNodePoolInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s GetNodePoolInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetNodePoolInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetNodePoolInput"}

	if s.ClusterName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ClusterName"))
	}

	if s.NodePoolName == nil {
		invalidParams.Add(aws.NewErrParamRequired("NodePoolName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s GetNodePoolInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.ClusterName != nil {
		v := *s.ClusterName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "ClusterName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NodePoolName != nil {
		v := *s.NodePoolName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "NodePoolName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetNodePoolResponse
type GetNodePoolOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NodePool *NodePool `locationName:"nodePool" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s GetNodePoolOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s GetNodePoolOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetNodePoolOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s GetNodePoolOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.NodePool != nil {
		v := s.NodePool

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "nodePool", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetServerConfigInput
type GetServerConfigInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s GetServerConfigInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s GetServerConfigInput) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s GetServerConfigInput) MarshalFields(e protocol.FieldEncoder) error {

	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetServerConfigResponse
type GetServerConfigOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	RequestId *string `locationName:"requestId" type:"string"`

	ServerConfig *ServerConfig `locationName:"serverConfig" type:"structure"`
}

// String returns the string representation
func (s GetServerConfigOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s GetServerConfigOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetServerConfigOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s GetServerConfigOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ServerConfig != nil {
		v := s.ServerConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "serverConfig", v, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetSnapshotRequest
type GetSnapshotInput struct {
	_ struct{} `type:"structure"`

	// SnapshotName is a required field
	SnapshotName *string `location:"uri" locationName:"SnapshotName" type:"string" required:"true"`
}

// String returns the string representation
func (s GetSnapshotInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s GetSnapshotInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GetSnapshotInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "GetSnapshotInput"}

	if s.SnapshotName == nil {
		invalidParams.Add(aws.NewErrParamRequired("SnapshotName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s GetSnapshotInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.SnapshotName != nil {
		v := *s.SnapshotName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "SnapshotName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/GetSnapshotResponse
type GetSnapshotOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	RequestId *string `locationName:"requestId" type:"string"`

	Snapshot *Snapshot `locationName:"snapshot" type:"structure"`
}

// String returns the string representation
func (s GetSnapshotOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s GetSnapshotOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s GetSnapshotOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s GetSnapshotOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Snapshot != nil {
		v := s.Snapshot

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "snapshot", v, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/HttpLoadBalancing
type HttpLoadBalancing struct {
	_ struct{} `type:"structure"`

	// Disabled is a required field
	Disabled *bool `locationName:"disabled" type:"boolean" required:"true"`
}

// String returns the string representation
func (s HttpLoadBalancing) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s HttpLoadBalancing) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *HttpLoadBalancing) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "HttpLoadBalancing"}

	if s.Disabled == nil {
		invalidParams.Add(aws.NewErrParamRequired("Disabled"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s HttpLoadBalancing) MarshalFields(e protocol.FieldEncoder) error {
	if s.Disabled != nil {
		v := *s.Disabled

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "disabled", protocol.BoolValue(v), metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ListClustersInput
type ListClustersInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ListClustersInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s ListClustersInput) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ListClustersInput) MarshalFields(e protocol.FieldEncoder) error {

	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ListClustersResponse
type ListClustersOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Clusters []Cluster `locationName:"clusters" type:"list"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s ListClustersOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s ListClustersOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListClustersOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ListClustersOutput) MarshalFields(e protocol.FieldEncoder) error {
	if len(s.Clusters) > 0 {
		v := s.Clusters

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "clusters", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ListFirewallGroupsInput
type ListFirewallGroupsInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ListFirewallGroupsInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s ListFirewallGroupsInput) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ListFirewallGroupsInput) MarshalFields(e protocol.FieldEncoder) error {

	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ListFirewallGroupsResponse
type ListFirewallGroupsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	FirewallGroups []FirewallGroupResponse `locationName:"firewallGroups" type:"list"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s ListFirewallGroupsOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s ListFirewallGroupsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListFirewallGroupsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ListFirewallGroupsOutput) MarshalFields(e protocol.FieldEncoder) error {
	if len(s.FirewallGroups) > 0 {
		v := s.FirewallGroups

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "firewallGroups", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ListNodePoolsRequest
type ListNodePoolsInput struct {
	_ struct{} `type:"structure"`

	// ClusterName is a required field
	ClusterName *string `location:"uri" locationName:"ClusterName" type:"string" required:"true"`
}

// String returns the string representation
func (s ListNodePoolsInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s ListNodePoolsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListNodePoolsInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "ListNodePoolsInput"}

	if s.ClusterName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ClusterName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ListNodePoolsInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.ClusterName != nil {
		v := *s.ClusterName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "ClusterName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ListNodePoolsResponse
type ListNodePoolsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NodePools []NodePool `locationName:"nodePools" type:"list"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s ListNodePoolsOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s ListNodePoolsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListNodePoolsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ListNodePoolsOutput) MarshalFields(e protocol.FieldEncoder) error {
	if len(s.NodePools) > 0 {
		v := s.NodePools

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "nodePools", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ListSnapshotsInput
type ListSnapshotsInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ListSnapshotsInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSnapshotsInput) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ListSnapshotsInput) MarshalFields(e protocol.FieldEncoder) error {

	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ListSnapshotsResponse
type ListSnapshotsOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	RequestId *string `locationName:"requestId" type:"string"`

	Snapshots []Snapshot `locationName:"snapshots" type:"list"`
}

// String returns the string representation
func (s ListSnapshotsOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s ListSnapshotsOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s ListSnapshotsOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ListSnapshotsOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.Snapshots) > 0 {
		v := s.Snapshots

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "snapshots", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/NetworkConfig
type NetworkConfig struct {
	_ struct{} `type:"structure"`

	// NetworkId is a required field
	NetworkId *string `locationName:"networkId" type:"string" required:"true"`
}

// String returns the string representation
func (s NetworkConfig) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s NetworkConfig) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *NetworkConfig) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "NetworkConfig"}

	if s.NetworkId == nil {
		invalidParams.Add(aws.NewErrParamRequired("NetworkId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s NetworkConfig) MarshalFields(e protocol.FieldEncoder) error {
	if s.NetworkId != nil {
		v := *s.NetworkId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "networkId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/Node
type Node struct {
	_ struct{} `type:"structure"`

	AvailabilityZone *string `locationName:"availabilityZone" type:"string"`

	Name *string `locationName:"name" type:"string"`

	PrivateIpAddress *string `locationName:"privateIpAddress" type:"string"`

	PublicIpAddress *string `locationName:"publicIpAddress" type:"string"`

	Status *string `locationName:"status" type:"string"`
}

// String returns the string representation
func (s Node) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s Node) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s Node) MarshalFields(e protocol.FieldEncoder) error {
	if s.AvailabilityZone != nil {
		v := *s.AvailabilityZone

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "availabilityZone", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.PrivateIpAddress != nil {
		v := *s.PrivateIpAddress

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "privateIpAddress", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.PublicIpAddress != nil {
		v := *s.PublicIpAddress

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "publicIpAddress", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Status != nil {
		v := *s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/NodePool
type NodePool struct {
	_ struct{} `type:"structure"`

	InitialNodeCount *int64 `locationName:"initialNodeCount" type:"integer"`

	InstanceType *string `locationName:"instanceType" type:"string"`

	Name *string `locationName:"name" type:"string"`

	NodeCount *int64 `locationName:"nodeCount" type:"integer"`

	Nodes []Node `locationName:"nodes" type:"list"`

	Status *string `locationName:"status" type:"string"`
}

// String returns the string representation
func (s NodePool) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s NodePool) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s NodePool) MarshalFields(e protocol.FieldEncoder) error {
	if s.InitialNodeCount != nil {
		v := *s.InitialNodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "initialNodeCount", protocol.Int64Value(v), metadata)
	}
	if s.InstanceType != nil {
		v := *s.InstanceType

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "instanceType", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NodeCount != nil {
		v := *s.NodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "nodeCount", protocol.Int64Value(v), metadata)
	}
	if len(s.Nodes) > 0 {
		v := s.Nodes

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "nodes", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	if s.Status != nil {
		v := *s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/RestoreClusterFromSnapshotRequest
type RestoreClusterFromSnapshotInput struct {
	_ struct{} `type:"structure"`

	// Cluster is a required field
	Cluster *RestoreClusterFromSnapshotRequestCluster `locationName:"cluster" type:"structure" required:"true"`

	// SnapshotName is a required field
	SnapshotName *string `location:"uri" locationName:"SnapshotName" type:"string" required:"true"`
}

// String returns the string representation
func (s RestoreClusterFromSnapshotInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreClusterFromSnapshotInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RestoreClusterFromSnapshotInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "RestoreClusterFromSnapshotInput"}

	if s.Cluster == nil {
		invalidParams.Add(aws.NewErrParamRequired("Cluster"))
	}

	if s.SnapshotName == nil {
		invalidParams.Add(aws.NewErrParamRequired("SnapshotName"))
	}
	if s.Cluster != nil {
		if err := s.Cluster.Validate(); err != nil {
			invalidParams.AddNested("Cluster", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s RestoreClusterFromSnapshotInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.Cluster != nil {
		v := s.Cluster

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "cluster", v, metadata)
	}
	if s.SnapshotName != nil {
		v := *s.SnapshotName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "SnapshotName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/RestoreClusterFromSnapshotResponse
type RestoreClusterFromSnapshotOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Cluster *Cluster `locationName:"cluster" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s RestoreClusterFromSnapshotOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreClusterFromSnapshotOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s RestoreClusterFromSnapshotOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s RestoreClusterFromSnapshotOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.Cluster != nil {
		v := s.Cluster

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "cluster", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/RestoreClusterFromSnapshotRequestCluster
type RestoreClusterFromSnapshotRequestCluster struct {
	_ struct{} `type:"structure"`

	AddonsConfig *AddonsConfig `locationName:"addonsConfig" type:"structure"`

	Description *string `locationName:"description" type:"string"`

	// FirewallGroup is a required field
	FirewallGroup *string `locationName:"firewallGroup" type:"string" required:"true"`

	// Locations is a required field
	Locations []string `locationName:"locations" type:"list" required:"true"`

	MasterNodeCount *int64 `locationName:"masterNodeCount" type:"integer"`

	// Name is a required field
	Name *string `locationName:"name" type:"string" required:"true"`

	NetworkConfig *NetworkConfig `locationName:"networkConfig" type:"structure"`
}

// String returns the string representation
func (s RestoreClusterFromSnapshotRequestCluster) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreClusterFromSnapshotRequestCluster) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RestoreClusterFromSnapshotRequestCluster) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "RestoreClusterFromSnapshotRequestCluster"}

	if s.FirewallGroup == nil {
		invalidParams.Add(aws.NewErrParamRequired("FirewallGroup"))
	}

	if s.Locations == nil {
		invalidParams.Add(aws.NewErrParamRequired("Locations"))
	}

	if s.Name == nil {
		invalidParams.Add(aws.NewErrParamRequired("Name"))
	}
	if s.AddonsConfig != nil {
		if err := s.AddonsConfig.Validate(); err != nil {
			invalidParams.AddNested("AddonsConfig", err.(aws.ErrInvalidParams))
		}
	}
	if s.NetworkConfig != nil {
		if err := s.NetworkConfig.Validate(); err != nil {
			invalidParams.AddNested("NetworkConfig", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s RestoreClusterFromSnapshotRequestCluster) MarshalFields(e protocol.FieldEncoder) error {
	if s.AddonsConfig != nil {
		v := s.AddonsConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "addonsConfig", v, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.FirewallGroup != nil {
		v := *s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "firewallGroup", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.Locations) > 0 {
		v := s.Locations

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "locations", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddValue(protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v1)})
		}
		ls0.End()

	}
	if s.MasterNodeCount != nil {
		v := *s.MasterNodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "masterNodeCount", protocol.Int64Value(v), metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NetworkConfig != nil {
		v := s.NetworkConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "networkConfig", v, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/RevokeFirewallGroupRequest
type RevokeFirewallGroupInput struct {
	_ struct{} `type:"structure"`

	// FirewallGroupName is a required field
	FirewallGroupName *string `location:"uri" locationName:"FirewallGroupName" type:"string" required:"true"`

	Ids *string `location:"querystring" locationName:"ids" type:"string"`
}

// String returns the string representation
func (s RevokeFirewallGroupInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokeFirewallGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *RevokeFirewallGroupInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "RevokeFirewallGroupInput"}

	if s.FirewallGroupName == nil {
		invalidParams.Add(aws.NewErrParamRequired("FirewallGroupName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s RevokeFirewallGroupInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.FirewallGroupName != nil {
		v := *s.FirewallGroupName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "FirewallGroupName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Ids != nil {
		v := *s.Ids

		metadata := protocol.Metadata{}
		e.SetValue(protocol.QueryTarget, "ids", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/RevokeFirewallGroupResponse
type RevokeFirewallGroupOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	FirewallGroup *FirewallGroupResponse `locationName:"firewallGroup" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s RevokeFirewallGroupOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokeFirewallGroupOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s RevokeFirewallGroupOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s RevokeFirewallGroupOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.FirewallGroup != nil {
		v := s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "firewallGroup", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/ServerConfig
type ServerConfig struct {
	_ struct{} `type:"structure"`

	DefaultKubernetesVersion *string `locationName:"defaultKubernetesVersion" type:"string"`

	ValidKubernetesVersions []string `locationName:"validKubernetesVersions" type:"list"`
}

// String returns the string representation
func (s ServerConfig) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s ServerConfig) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s ServerConfig) MarshalFields(e protocol.FieldEncoder) error {
	if s.DefaultKubernetesVersion != nil {
		v := *s.DefaultKubernetesVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "defaultKubernetesVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.ValidKubernetesVersions) > 0 {
		v := s.ValidKubernetesVersions

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "validKubernetesVersions", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddValue(protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v1)})
		}
		ls0.End()

	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/SetNodePoolSizeRequest
type SetNodePoolSizeInput struct {
	_ struct{} `type:"structure"`

	// ClusterName is a required field
	ClusterName *string `location:"uri" locationName:"ClusterName" type:"string" required:"true"`

	// NodeCount is a required field
	NodeCount *int64 `locationName:"nodeCount" type:"integer" required:"true"`

	// NodePoolName is a required field
	NodePoolName *string `location:"uri" locationName:"NodePoolName" type:"string" required:"true"`
}

// String returns the string representation
func (s SetNodePoolSizeInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s SetNodePoolSizeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SetNodePoolSizeInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "SetNodePoolSizeInput"}

	if s.ClusterName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ClusterName"))
	}

	if s.NodeCount == nil {
		invalidParams.Add(aws.NewErrParamRequired("NodeCount"))
	}

	if s.NodePoolName == nil {
		invalidParams.Add(aws.NewErrParamRequired("NodePoolName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s SetNodePoolSizeInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.NodeCount != nil {
		v := *s.NodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "nodeCount", protocol.Int64Value(v), metadata)
	}
	if s.ClusterName != nil {
		v := *s.ClusterName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "ClusterName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NodePoolName != nil {
		v := *s.NodePoolName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "NodePoolName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/SetNodePoolSizeResponse
type SetNodePoolSizeOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	NodePool *NodePool `locationName:"nodePool" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s SetNodePoolSizeOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s SetNodePoolSizeOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s SetNodePoolSizeOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s SetNodePoolSizeOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.NodePool != nil {
		v := s.NodePool

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "nodePool", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/Snapshot
type Snapshot struct {
	_ struct{} `type:"structure"`

	Cluster *SnapshotCluster `locationName:"cluster" type:"structure"`

	CreateTime *string `locationName:"createTime" type:"string"`

	Description *string `locationName:"description" type:"string"`

	ExpirationTime *string `locationName:"expirationTime" type:"string"`

	Name *string `locationName:"name" type:"string"`

	ResourceVersion *string `locationName:"resourceVersion" type:"string"`

	Status *string `locationName:"status" type:"string"`
}

// String returns the string representation
func (s Snapshot) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s Snapshot) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s Snapshot) MarshalFields(e protocol.FieldEncoder) error {
	if s.Cluster != nil {
		v := s.Cluster

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "cluster", v, metadata)
	}
	if s.CreateTime != nil {
		v := *s.CreateTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "createTime", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ExpirationTime != nil {
		v := *s.ExpirationTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "expirationTime", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ResourceVersion != nil {
		v := *s.ResourceVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "resourceVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Status != nil {
		v := *s.Status

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "status", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/SnapshotCluster
type SnapshotCluster struct {
	_ struct{} `type:"structure"`

	KubernetesVersion *string `locationName:"kubernetesVersion" type:"string"`

	Name *string `locationName:"name" type:"string"`

	NodePools []SnapshotNodePool `locationName:"nodePools" type:"list"`
}

// String returns the string representation
func (s SnapshotCluster) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s SnapshotCluster) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s SnapshotCluster) MarshalFields(e protocol.FieldEncoder) error {
	if s.KubernetesVersion != nil {
		v := *s.KubernetesVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "kubernetesVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if len(s.NodePools) > 0 {
		v := s.NodePools

		metadata := protocol.Metadata{}
		ls0 := e.List(protocol.BodyTarget, "nodePools", metadata)
		ls0.Start()
		for _, v1 := range v {
			ls0.ListAddFields(v1)
		}
		ls0.End()

	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/SnapshotNodePool
type SnapshotNodePool struct {
	_ struct{} `type:"structure"`

	InstanceType *string `locationName:"instanceType" type:"string"`

	Name *string `locationName:"name" type:"string"`

	NodeCount *int64 `locationName:"nodeCount" type:"integer"`
}

// String returns the string representation
func (s SnapshotNodePool) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s SnapshotNodePool) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s SnapshotNodePool) MarshalFields(e protocol.FieldEncoder) error {
	if s.InstanceType != nil {
		v := *s.InstanceType

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "instanceType", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.NodeCount != nil {
		v := *s.NodeCount

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "nodeCount", protocol.Int64Value(v), metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/UpdateClusterRequest
type UpdateClusterInput struct {
	_ struct{} `type:"structure"`

	// Cluster is a required field
	Cluster *UpdateClusterRequestCluster `locationName:"cluster" type:"structure" required:"true"`

	// ClusterName is a required field
	ClusterName *string `location:"uri" locationName:"ClusterName" type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateClusterInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateClusterInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateClusterInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateClusterInput"}

	if s.Cluster == nil {
		invalidParams.Add(aws.NewErrParamRequired("Cluster"))
	}

	if s.ClusterName == nil {
		invalidParams.Add(aws.NewErrParamRequired("ClusterName"))
	}
	if s.Cluster != nil {
		if err := s.Cluster.Validate(); err != nil {
			invalidParams.AddNested("Cluster", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateClusterInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.Cluster != nil {
		v := s.Cluster

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "cluster", v, metadata)
	}
	if s.ClusterName != nil {
		v := *s.ClusterName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "ClusterName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/UpdateClusterResponse
type UpdateClusterOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	Cluster *Cluster `locationName:"cluster" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s UpdateClusterOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateClusterOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateClusterOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateClusterOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.Cluster != nil {
		v := s.Cluster

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "cluster", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/UpdateClusterRequestCluster
type UpdateClusterRequestCluster struct {
	_ struct{} `type:"structure"`

	AddonsConfig *AddonsConfig `locationName:"addonsConfig" type:"structure"`

	Description *string `locationName:"description" type:"string"`

	KubernetesVersion *string `locationName:"kubernetesVersion" type:"string"`

	Name *string `locationName:"name" type:"string"`
}

// String returns the string representation
func (s UpdateClusterRequestCluster) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateClusterRequestCluster) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateClusterRequestCluster) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateClusterRequestCluster"}
	if s.AddonsConfig != nil {
		if err := s.AddonsConfig.Validate(); err != nil {
			invalidParams.AddNested("AddonsConfig", err.(aws.ErrInvalidParams))
		}
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateClusterRequestCluster) MarshalFields(e protocol.FieldEncoder) error {
	if s.AddonsConfig != nil {
		v := s.AddonsConfig

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "addonsConfig", v, metadata)
	}
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.KubernetesVersion != nil {
		v := *s.KubernetesVersion

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "kubernetesVersion", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/UpdateFirewallGroupRequest
type UpdateFirewallGroupInput struct {
	_ struct{} `type:"structure"`

	// FirewallGroup is a required field
	FirewallGroup *UpdateFirewallGroupRequestFirewallGroup `locationName:"firewallGroup" type:"structure" required:"true"`

	// FirewallGroupName is a required field
	FirewallGroupName *string `location:"uri" locationName:"FirewallGroupName" type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateFirewallGroupInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFirewallGroupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateFirewallGroupInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateFirewallGroupInput"}

	if s.FirewallGroup == nil {
		invalidParams.Add(aws.NewErrParamRequired("FirewallGroup"))
	}

	if s.FirewallGroupName == nil {
		invalidParams.Add(aws.NewErrParamRequired("FirewallGroupName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateFirewallGroupInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.FirewallGroup != nil {
		v := s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "firewallGroup", v, metadata)
	}
	if s.FirewallGroupName != nil {
		v := *s.FirewallGroupName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "FirewallGroupName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/UpdateFirewallGroupResponse
type UpdateFirewallGroupOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	FirewallGroup *FirewallGroupResponse `locationName:"firewallGroup" type:"structure"`

	RequestId *string `locationName:"requestId" type:"string"`
}

// String returns the string representation
func (s UpdateFirewallGroupOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFirewallGroupOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateFirewallGroupOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateFirewallGroupOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.FirewallGroup != nil {
		v := s.FirewallGroup

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "firewallGroup", v, metadata)
	}
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/UpdateFirewallGroupRequestFirewallGroup
type UpdateFirewallGroupRequestFirewallGroup struct {
	_ struct{} `type:"structure"`

	Description *string `locationName:"description" type:"string"`

	Name *string `locationName:"name" type:"string"`
}

// String returns the string representation
func (s UpdateFirewallGroupRequestFirewallGroup) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateFirewallGroupRequestFirewallGroup) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateFirewallGroupRequestFirewallGroup) MarshalFields(e protocol.FieldEncoder) error {
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/UpdateSnapshotRequest
type UpdateSnapshotInput struct {
	_ struct{} `type:"structure"`

	// Snapshot is a required field
	Snapshot *UpdateSnapshotRequestSnapshot `locationName:"snapshot" type:"structure" required:"true"`

	// SnapshotName is a required field
	SnapshotName *string `location:"uri" locationName:"SnapshotName" type:"string" required:"true"`
}

// String returns the string representation
func (s UpdateSnapshotInput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSnapshotInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *UpdateSnapshotInput) Validate() error {
	invalidParams := aws.ErrInvalidParams{Context: "UpdateSnapshotInput"}

	if s.Snapshot == nil {
		invalidParams.Add(aws.NewErrParamRequired("Snapshot"))
	}

	if s.SnapshotName == nil {
		invalidParams.Add(aws.NewErrParamRequired("SnapshotName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateSnapshotInput) MarshalFields(e protocol.FieldEncoder) error {

	if s.Snapshot != nil {
		v := s.Snapshot

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "snapshot", v, metadata)
	}
	if s.SnapshotName != nil {
		v := *s.SnapshotName

		metadata := protocol.Metadata{}
		e.SetValue(protocol.PathTarget, "SnapshotName", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/UpdateSnapshotResponse
type UpdateSnapshotOutput struct {
	_ struct{} `type:"structure"`

	responseMetadata aws.Response

	RequestId *string `locationName:"requestId" type:"string"`

	Snapshot *Snapshot `locationName:"snapshot" type:"structure"`
}

// String returns the string representation
func (s UpdateSnapshotOutput) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSnapshotOutput) GoString() string {
	return s.String()
}

// SDKResponseMetdata return sthe response metadata for the API.
func (s UpdateSnapshotOutput) SDKResponseMetadata() aws.Response {
	return s.responseMetadata
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateSnapshotOutput) MarshalFields(e protocol.FieldEncoder) error {
	if s.RequestId != nil {
		v := *s.RequestId

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "requestId", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Snapshot != nil {
		v := s.Snapshot

		metadata := protocol.Metadata{}
		e.SetFields(protocol.BodyTarget, "snapshot", v, metadata)
	}
	return nil
}

// Please also see https://pfs.nifcloud.com/api//goto/WebAPI/hatoba-2019-03-27/UpdateSnapshotRequestSnapshot
type UpdateSnapshotRequestSnapshot struct {
	_ struct{} `type:"structure"`

	Description *string `locationName:"description" type:"string"`

	ExpirationTime *string `locationName:"expirationTime" type:"string"`

	Name *string `locationName:"name" type:"string"`
}

// String returns the string representation
func (s UpdateSnapshotRequestSnapshot) String() string {
	return nifcloudutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdateSnapshotRequestSnapshot) GoString() string {
	return s.String()
}

// MarshalFields encodes the AWS API shape using the passed in protocol encoder.
func (s UpdateSnapshotRequestSnapshot) MarshalFields(e protocol.FieldEncoder) error {
	if s.Description != nil {
		v := *s.Description

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "description", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.ExpirationTime != nil {
		v := *s.ExpirationTime

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "expirationTime", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	if s.Name != nil {
		v := *s.Name

		metadata := protocol.Metadata{}
		e.SetValue(protocol.BodyTarget, "name", protocol.QuotedValue{ValueMarshaler: protocol.StringValue(v)}, metadata)
	}
	return nil
}
